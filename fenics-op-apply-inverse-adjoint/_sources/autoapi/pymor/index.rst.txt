:mod:`pymor`
============

.. py:module:: pymor


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   algorithms <algorithms/index.rst>
   analyticalproblems <analyticalproblems/index.rst>
   bindings <bindings/index.rst>
   core <core/index.rst>
   discretizers <discretizers/index.rst>
   models <models/index.rst>
   operators <operators/index.rst>
   parallel <parallel/index.rst>
   parameters <parameters/index.rst>
   reductors <reductors/index.rst>
   scripts <scripts/index.rst>
   tools <tools/index.rst>
   vectorarrays <vectorarrays/index.rst>


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   basic <basic/index.rst>
   version <version/index.rst>


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor._init_mpi
   pymor.load_defaults_from_file
   pymor.set_log_levels
   pymor.set_log_format
   pymor.quit_event_loop



Attributes
~~~~~~~~~~

.. autoapisummary::

   pymor.config
   pymor.revstring
   pymor.__version__
   pymor.filename


.. function:: _init_mpi()

   provides a way to manually set the thread init mode for MPI if necessary.
   Needs to happen as early as possible, otherwise mpi4py might auto-init somewhere else.



.. data:: config
   

   

.. function:: load_defaults_from_file(filename='./pymor_defaults.py')

   Loads |default| values defined in configuration file.

   Suitable configuration files can be created via :func:`write_defaults_to_file`.
   The file is loaded via Python's :func:`exec` function, so be very careful
   with configuration files you have not created your own. You have been
   warned!

   .. admonition:: Parameters

       filename
           Path of the configuration file.
           


.. data:: revstring
   

   

.. data:: __version__
   

   

.. data:: filename
   

   

.. function:: set_log_levels(levels=None)

   Set log levels for pyMOR's logging facility.

   .. admonition:: Parameters

       levels
           Dict of log levels. Keys are names of loggers (see :func:`logging.getLogger`),
           values are the log levels to set for the loggers of the given names
           (see :meth:`~logging.Logger.setLevel`).
           


.. function:: set_log_format(max_hierarchy_level=1, indent_blocks=True, block_timings=False)

   Set log levels for pyMOR's logging facility.

   .. admonition:: Parameters

       max_hierarchy_level
           The number of components of the loggers name which are printed.
           (The first component is always stripped, the last component always
           preserved.)
       indent_blocks
           If `True`, indent log messages inside a code block started with
           `with logger.block(...)`.
       block_timings
           If `True`, measure the duration of a code block started with
           `with logger.block(...)`.
           


.. function:: quit_event_loop()


