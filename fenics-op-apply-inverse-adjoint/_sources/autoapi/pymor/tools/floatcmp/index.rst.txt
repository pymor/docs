:mod:`pymor.tools.floatcmp`
===========================

.. py:module:: pymor.tools.floatcmp


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.tools.floatcmp.float_cmp
   pymor.tools.floatcmp.float_cmp_all
   pymor.tools.floatcmp.bounded
   pymor.tools.floatcmp.compare_with_tolerance
   pymor.tools.floatcmp.almost_less



.. function:: float_cmp(x, y, rtol=1e-14, atol=1e-14)

   Compare x and y component-wise for almost equality.

   For scalars we define almost equality as ::

      float_cmp(x,y) <=> |x - y| <= atol + |y|*rtol

   .. note::
      Numpy's :meth:`~numpy.allclose` method uses the same definition but
      treats arrays containing infinities as close if the infinities are
      at the same places and all other entries are close.
      In our definition, arrays containing infinities can never be close
      which seems more appropriate in most cases.

   .. admonition:: Parameters

       x, y
           |NumPy arrays| to be compared. Have to be broadcastable to the same shape.
       rtol
           The relative tolerance.
       atol
           The absolute tolerance.
           


.. function:: float_cmp_all(x, y, rtol=None, atol=None)

   Compare x and y for almost equality.

   Returns `True` if all components of `x` are almost equal to the corresponding
   components of `y`.

   See :meth:`float_cmp`.


.. function:: bounded(lower, upper, x, rtol=None, atol=None)

   Check if x is strictly in bounds (lower, upper) or float_compares equal to lower or upper.

   .. admonition:: Parameters

       lower
           Lower bound
       upper
           Upper bound
       x
           value to check
       rtol
           relative tolerance for float_cmp
       atol
           absolute tolerance for float_cmp
           


.. function:: compare_with_tolerance(x, y, comparison_op, rtol=1e-14, atol=1e-14)

   'One-sided' Comparison x and y component-wise with given comparison op.

   For scalars we define almost equality as ::

      compare_with_tolerance(x,y) <=> op(x - y, atol + y*rtol)

   .. admonition:: Parameters

       x, y
           |NumPy arrays| to be compared. Have to be broadcastable to the same shape.
       comparison_op
           binary operator object, see |operator| module.
       rtol
           The relative tolerance.
       atol
           The absolute tolerance.
           


.. function:: almost_less(x, y, rtol=None, atol=None)


