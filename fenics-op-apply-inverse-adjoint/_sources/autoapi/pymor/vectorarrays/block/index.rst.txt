:mod:`pymor.vectorarrays.block`
===============================

.. py:module:: pymor.vectorarrays.block


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.vectorarrays.block.BlockVectorArray
   pymor.vectorarrays.block.BlockVectorSpace
   pymor.vectorarrays.block.BlockVectorArrayView




.. class:: BlockVectorArray(blocks, space)


   Bases: :py:obj:`pymor.vectorarrays.interface.VectorArray`

   |VectorArray| where each vector is a direct sum of sub-vectors.

   Given a list of equal length |VectorArrays| `blocks`, this |VectorArray|
   represents the direct sums of the vectors contained in the arrays.
   The associated |VectorSpace| is :class:`BlockVectorSpace`.

   :class:`BlockVectorArray` can be used in conjunction with
   :class:`~pymor.operators.block.BlockOperator`.

   .. method:: to_numpy(self, ensure_copy=False)

      Return (len(self), self.dim) NumPy Array with the data stored in the array.

      .. admonition:: Parameters

          ensure_copy
              If `False`, modifying the returned |NumPy array| might alter the original
              |VectorArray|. If `True` always a copy of the array data is made.
              


   .. method:: real(self)
      :property:

      Real part.


   .. method:: imag(self)
      :property:

      Imaginary part.


   .. method:: conj(self)

      Complex conjugation.


   .. method:: block(self, ind)

      Return a copy of a single block or a sequence of blocks.


   .. method:: num_blocks(self)
      :property:


   .. method:: __len__(self)

      The number of vectors in the array.


   .. method:: __getitem__(self, ind)

      Return a |VectorArray| view onto a subset of the vectors in the array.


   .. method:: __delitem__(self, ind)

      Remove vectors from the array.


   .. method:: append(self, other, remove_from_other=False)

      Append vectors to the array.

      .. admonition:: Parameters

          other
              A |VectorArray| containing the vectors to be appended.
          remove_from_other
              If `True`, the appended vectors are removed from `other`.
              For list-like implementations this can be used to prevent
              unnecessary copies of the involved vectors.
              


   .. method:: copy(self, deep=False)

      Returns a copy of the array.

      All |VectorArray| implementations in pyMOR have copy-on-write semantics:
      if not specified otherwise by setting `deep` to `True`, the returned
      copy will hold a handle to the same array data as the original array,
      and a deep copy of the data will only be performed when one of the arrays
      is modified.

      Note that for |NumpyVectorArray|, a deep copy is always performed when only
      some vectors in the array are copied.

      .. admonition:: Parameters

          deep
              Ensure that an actual copy of the array data is made (see above).
              
      .. admonition:: Returns

          A copy of the |VectorArray|.
              


   .. method:: scal(self, alpha)

      BLAS SCAL operation (in-place scalar multiplication).

      This method calculates ::

          self = alpha*self

      If `alpha` is a scalar, each vector is multiplied by this scalar. Otherwise, `alpha`
      has to be a one-dimensional |NumPy array| of the same length as `self`
      containing the factors for each vector.

      .. admonition:: Parameters

          alpha
              The scalar coefficient or one-dimensional |NumPy array| of coefficients
              with which the vectors in `self` are multiplied.
              


   .. method:: axpy(self, alpha, x)

      BLAS AXPY operation.

      This method forms the sum ::

          self = alpha*x + self

      If the length of `x` is 1, the same `x` vector is used for all vectors
      in `self`. Otherwise, the lengths of `self`  and `x` have to agree.
      If `alpha` is a scalar, each `x` vector is multiplied with the same factor `alpha`.
      Otherwise, `alpha` has to be a one-dimensional |NumPy array| of the same length as
      `self` containing the coefficients for each `x` vector.

      .. admonition:: Parameters

          alpha
              The scalar coefficient or one-dimensional |NumPy array| of coefficients with which
              the vectors in `x` are multiplied.
          x
              A |VectorArray| containing the x-summands.
              


   .. method:: inner(self, other, product=None)

      Returns the inner products between |VectorArray| elements.

      If `product` is `None`, the Euclidean inner product between
      the :meth:`dofs` of `self` and `other` are returned, i.e. ::

          U.inner(V)

      is equivalent to::

          U.dofs(np.arange(U.dim)) @ V.dofs(np.arange(V.dim)).T

      (Note, that :meth:`dofs` is only intended to be called for a
      small number of DOF indices.)

      If a `product` |Operator| is specified, this |Operator| is
      used to compute the inner products using
      :meth:`~pymor.operators.inerface.Operator.apply2`, i.e.
      `U.inner(V, product)` is equivalent to::

          product.apply2(U, V)

      which in turn is, by default, implemented as::

          U.inner(product.apply(V))

      In the case of complex numbers, this is antilinear in the
      first argument, i.e. in 'self'.
      Complex conjugation is done in the first argument because
      most numerical software in the community handles it this way:
      Numpy, DUNE, FEniCS, Eigen, Matlab and BLAS do complex conjugation
      in the first argument, only PetSc and deal.ii do complex
      conjugation in the second argument.

      .. admonition:: Parameters

          other
              A |VectorArray| containing the second factors.
          product
              If not `None` an |Operator| representing the inner product
              bilinear form.
              
      .. admonition:: Returns

          A |NumPy array| `result` such that
              
              result[i, j] = ( self[i], other[j] ).
              


   .. method:: pairwise_inner(self, other, product=None)

      Returns the pairwise inner products between |VectorArray| elements.

      If `product` is `None`, the Euclidean inner product between
      the :meth:`dofs` of `self` and `other` are returned, i.e. ::

          U.pairwise_inner(V)

      is equivalent to::

          np.sum(U.dofs(np.arange(U.dim)) * V.dofs(np.arange(V.dim)), axis=-1)

      (Note, that :meth:`dofs` is only intended to be called for a
      small number of DOF indices.)

      If a `product` |Operator| is specified, this |Operator| is
      used to compute the inner products using
      :meth:`~pymor.operators.inerface.Operator.pairwise_apply2`, i.e.
      `U.inner(V, product)` is equivalent to::

          product.pairwise_apply2(U, V)

      which in turn is, by default, implemented as::

          U.pairwise_inner(product.apply(V))

      In the case of complex numbers, this is antilinear in the
      first argument, i.e. in 'self'.
      Complex conjugation is done in the first argument because
      most numerical software in the community handles it this way:
      Numpy, DUNE, FEniCS, Eigen, Matlab and BLAS do complex conjugation
      in the first argument, only PetSc and deal.ii do complex
      conjugation in the second argument.


      .. admonition:: Parameters

          other
              A |VectorArray| containing the second factors.
          product
              If not `None` an |Operator| representing the inner product
              bilinear form.
              
      .. admonition:: Returns

          A |NumPy array| `result` such that
              
              result[i] = ( self[i], other[i] ).
              
              


   .. method:: lincomb(self, coefficients)

      Returns linear combinations of the vectors contained in the array.

      .. admonition:: Parameters

          coefficients
              A |NumPy array| of dimension 1 or 2 containing the linear
              coefficients. `coefficients.shape[-1]` has to agree with
              `len(self)`.
              
      .. admonition:: Returns

          A |VectorArray| `result` such that
              
              result[i] = ∑ self[j] * coefficients[i,j]
              
          in case `coefficients` is of dimension 2, otherwise
          `len(result) == 1` and
              
              result[0] = ∑ self[j] * coefficients[j].
              


   .. method:: _norm(self)

      Implementation of :meth:`norm` for the case that no `product` is given.


   .. method:: _norm2(self)

      Implementation of :meth:`norm2` for the case that no `product` is given.


   .. method:: sup_norm(self)

      The l-infinity-norms of the vectors contained in the array.

      .. admonition:: Returns

          A |NumPy array| `result` such that `result[i]` contains the norm
          of `self[i]`.
              


   .. method:: dofs(self, dof_indices)

      Extract DOFs of the vectors contained in the array.

      .. admonition:: Parameters

          dof_indices
              List or 1D |NumPy array| of indices of the DOFs that are to be returned.
              
      .. admonition:: Returns

          A |NumPy array| `result` such that `result[i, j]` is the `dof_indices[j]`-th
          DOF of the `i`-th vector of the array.
              


   .. method:: amax(self)

      The maximum absolute value of the DOFs contained in the array.

      .. admonition:: Returns

          max_ind
              |NumPy array| containing for each vector a DOF index at which the maximum is
              attained.
          max_val
              |NumPy array| containing for each vector the maximum absolute value of its
              DOFs.
              


   .. method:: _blocks_are_valid(self)


   .. method:: _compute_bins(self)



.. class:: BlockVectorSpace(subspaces)


   Bases: :py:obj:`pymor.vectorarrays.interface.VectorSpace`

   |VectorSpace| of :class:`BlockVectorArrays <BlockVectorArray>`.

   A :class:`BlockVectorSpace` is defined by the |VectorSpaces| of the
   individual subblocks which constitute a given array. In particular
   for a given :class`BlockVectorArray` `U`, we have the identity ::

       (U.blocks[0].space, U.blocks[1].space, ..., U.blocks[-1].space) == U.space.

   .. admonition:: Parameters

       subspaces
           The tuple defined above.
           

   .. method:: __eq__(self, other)

      Return self==value.


   .. method:: __hash__(self)

      Return hash(self).


   .. method:: dim(self)
      :property:


   .. method:: zeros(self, count=1, reserve=0)

      Create a |VectorArray| of null vectors

      .. admonition:: Parameters

          count
              The number of vectors.
          reserve
              Hint for the backend to which length the array will grow.
              
      .. admonition:: Returns

          A |VectorArray| containing `count` vectors with each component zero.
              


   .. method:: make_array(cls, obj)

      Create a |VectorArray| from raw data.

      This method is used in the implementation of |Operators|
      and |Models| to create new |VectorArrays| from
      raw data of the underlying solver backends. The ownership
      of the data is transferred to the newly created array.

      The exact signature of this method depends on the wrapped
      solver backend.


   .. method:: make_block_diagonal_array(self, obj)


   .. method:: from_numpy(self, data, ensure_copy=False)

      Create a |VectorArray| from a |NumPy array|

      Note that this method will not be supported by all vector
      space implementations.

      .. admonition:: Parameters

          data
              |NumPy| array of shape `(len, dim)` where `len` is the
              number of vectors and `dim` their dimension.
          ensure_copy
              If `False`, modifying the returned |VectorArray| might alter the original
              |NumPy array|. If `True` always a copy of the array data is made.
              
      .. admonition:: Returns

          A |VectorArray| with `data` as data.
              



.. class:: BlockVectorArrayView(base, ind)


   Bases: :py:obj:`BlockVectorArray`

   |VectorArray| where each vector is a direct sum of sub-vectors.

   Given a list of equal length |VectorArrays| `blocks`, this |VectorArray|
   represents the direct sums of the vectors contained in the arrays.
   The associated |VectorSpace| is :class:`BlockVectorSpace`.

   :class:`BlockVectorArray` can be used in conjunction with
   :class:`~pymor.operators.block.BlockOperator`.

   .. attribute:: is_view
      :annotation: = True

      


