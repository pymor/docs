:mod:`pymor.reductors.interpolation`
====================================

.. py:module:: pymor.reductors.interpolation


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.reductors.interpolation.GenericBHIReductor
   pymor.reductors.interpolation.LTIBHIReductor
   pymor.reductors.interpolation.SOBHIReductor
   pymor.reductors.interpolation.DelayBHIReductor
   pymor.reductors.interpolation.TFBHIReductor




.. class:: GenericBHIReductor(fom, mu=None)


   Bases: :py:obj:`pymor.core.base.BasicObject`

   Generic bitangential Hermite interpolation reductor.

   This is a generic reductor for reducing any linear
   :class:`~pymor.models.iosys.InputStateOutputModel` with the transfer
   function which can be written in the generalized coprime
   factorization :math:`H(s) = \mathcal{C}(s) \mathcal{K}(s)^{-1}
   \mathcal{B}(s)` as in :cite:`BG09`. The interpolation here is limited to
   only up to the first derivative. Interpolation points are assumed to
   be pairwise distinct.

   In particular, given interpolation points :math:`\sigma_i`, right
   tangential directions :math:`b_i`, and left tangential directions
   :math:`c_i`, for :math:`i = 1, 2, \ldots, r`, which are closed under
   conjugation (if :math:`\sigma_i` is real, then so are :math:`b_i`
   and :math:`c_i`; if :math:`\sigma_i` is complex, there is
   :math:`\sigma_j` such that :math:`\sigma_j = \overline{\sigma_i}`,
   :math:`b_j = \overline{b_i}`, :math:`c_j = \overline{c_i}`), this
   reductor finds a transfer function :math:`\hat{H}` such that

   .. math::
       H(\sigma_i) b_i & = \hat{H}(\sigma_i) b_i, \\
       c_i^T H(\sigma_i) & = c_i^T \hat{H}(\sigma_i) b_i, \ - \widehat{y}\
       c_i^T H'(\sigma_i) b_i & = c_i^T \hat{H}'(\sigma_i) b_i,

   for all :math:`i = 1, 2, \ldots, r`.

   .. admonition:: Parameters

       fom
           The full-order |Model| to reduce.
       mu
           |Parameter values|.
           

   .. attribute:: _PGReductor
      

      

   .. method:: _B_apply(self, s, V)
      :abstractmethod:


   .. method:: _C_apply_adjoint(self, s, V)
      :abstractmethod:


   .. method:: _K_apply_inverse(self, s, V)
      :abstractmethod:


   .. method:: _K_apply_inverse_adjoint(self, s, V)
      :abstractmethod:


   .. method:: _fom_assemble(self)
      :abstractmethod:


   .. method:: reduce(self, sigma, b, c, projection='orth')

      Bitangential Hermite interpolation.

      .. admonition:: Parameters

          sigma
              Interpolation points (closed under conjugation), sequence of
              length `r`.
          b
              Right tangential directions, |NumPy array| of shape
              `(r, fom.dim_input)`.
          c
              Left tangential directions, |NumPy array| of shape
              `(r, fom.dim_output)`.
          projection
              Projection method:
              
              - `'orth'`: projection matrices are orthogonalized with
                respect to the Euclidean inner product
              - `'biorth'`: projection matrices are biorthogolized with
                respect to the E product
              
      .. admonition:: Returns

          rom
              Reduced-order model.
              


   .. method:: reconstruct(self, u)

      Reconstruct high-dimensional vector from reduced vector `u`.



.. class:: LTIBHIReductor(fom, mu=None)


   Bases: :py:obj:`GenericBHIReductor`

   Bitangential Hermite interpolation for |LTIModels|.

   .. admonition:: Parameters

       fom
           The full-order |LTIModel| to reduce.
       mu
           |Parameter values|.
           

   .. attribute:: _PGReductor
      

      

   .. method:: _B_apply(self, s, V)


   .. method:: _C_apply_adjoint(self, s, V)


   .. method:: _K_apply_inverse(self, s, V)


   .. method:: _K_apply_inverse_adjoint(self, s, V)


   .. method:: _fom_assemble(self)


   .. method:: reduce(self, sigma, b, c, projection='orth')

      Bitangential Hermite interpolation.

      .. admonition:: Parameters

          sigma
              Interpolation points (closed under conjugation), sequence of
              length `r`.
          b
              Right tangential directions, |NumPy array| of shape
              `(r, fom.dim_input)`.
          c
              Left tangential directions, |NumPy array| of shape
              `(r, fom.dim_output)`.
          projection
              Projection method:
              
              - `'orth'`: projection matrices are orthogonalized with
                respect to the Euclidean inner product
              - `'biorth'`: projection matrices are biorthogolized with
                respect to the E product
              - `'arnoldi'`: projection matrices are orthogonalized using
                the rational Arnoldi process (available only for SISO
                systems).
              
      .. admonition:: Returns

          rom
              Reduced-order model.
              



.. class:: SOBHIReductor(fom, mu=None)


   Bases: :py:obj:`GenericBHIReductor`

   Bitangential Hermite interpolation for |SecondOrderModels|.

   .. admonition:: Parameters

       fom
           The full-order |SecondOrderModel| to reduce.
       mu
           |Parameter values|.
           

   .. attribute:: _PGReductor
      

      

   .. method:: _B_apply(self, s, V)


   .. method:: _C_apply_adjoint(self, s, V)


   .. method:: _K_apply_inverse(self, s, V)


   .. method:: _K_apply_inverse_adjoint(self, s, V)


   .. method:: _fom_assemble(self)



.. class:: DelayBHIReductor(fom, mu=None)


   Bases: :py:obj:`GenericBHIReductor`

   Bitangential Hermite interpolation for |LinearDelayModels|.

   .. admonition:: Parameters

       fom
           The full-order |LinearDelayModel| to reduce.
       mu
           |Parameter values|.
           

   .. attribute:: _PGReductor
      

      

   .. method:: _B_apply(self, s, V)


   .. method:: _C_apply_adjoint(self, s, V)


   .. method:: _K_apply_inverse(self, s, V)


   .. method:: _K_apply_inverse_adjoint(self, s, V)


   .. method:: _fom_assemble(self)



.. class:: TFBHIReductor(fom, mu=None)


   Bases: :py:obj:`pymor.core.base.BasicObject`

   Loewner bitangential Hermite interpolation reductor.

   See :cite:`BG12`.

   .. admonition:: Parameters

       fom
           The |Model| with `eval_tf` and `eval_dtf` methods.
       mu
           |Parameter values|.
           

   .. method:: reduce(self, sigma, b, c)

      Realization-independent tangential Hermite interpolation.

      .. admonition:: Parameters

          sigma
              Interpolation points (closed under conjugation), sequence of
              length `r`.
          b
              Right tangential directions, |NumPy array| of shape
              `(r, fom.dim_input)`.
          c
              Left tangential directions, |NumPy array| of shape
              `(r, fom.dim_output)`.
              
      .. admonition:: Returns

          lti
              The reduced-order |LTIModel| interpolating the transfer
              function of `fom`.
              


   .. method:: reconstruct(self, u)

      Reconstruct high-dimensional vector from reduced vector `u`.



