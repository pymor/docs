:mod:`pymor.algorithms.lincomb`
===============================

.. py:module:: pymor.algorithms.lincomb


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.algorithms.lincomb.AssembleLincombRules



Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.algorithms.lincomb.assemble_lincomb



.. function:: assemble_lincomb(operators, coefficients, solver_options=None, name=None)

   Try to assemble a linear combination of the given operators.

   Returns a new |Operator| which represents the sum ::

       c_1*O_1 + ... + c_N*O_N

   where `O_i` are |Operators| and `c_i` scalar coefficients.

   This function is called in the :meth:`assemble` method of |LincombOperator| and
   is not intended to be used directly.

   To form the linear combination of backend |Operators| (containing actual matrix data),
   :meth:`~pymor.operators.interface.Operator._assemble_lincomb` will be called
   on the first |Operator| in the linear combination.

   .. admonition:: Parameters

       operators
           List of |Operators| `O_i` whose linear combination is formed.
       coefficients
           List of the corresponding linear coefficients `c_i`.
       solver_options
           |solver_options| for the assembled operator.
       name
           Name of the assembled operator.
           
   .. admonition:: Returns

       The assembled |Operator|.
           


.. class:: AssembleLincombRules(coefficients, solver_options, name)


   Bases: :py:obj:`pymor.algorithms.rules.RuleTable`

   Define algorithm by a table of match conditions and corresponding actions.

   |RuleTable| manages a table of |rules|, stored in the `rules`
   attributes, which can be :meth:`applied <apply>` to given
   objects.

   A new table is created by subclassing |RuleTable| and defining
   new methods which are decorated with :class:`match_class`,
   :class:`match_generic` or another :class:`rule` subclass.
   The order of the method definitions determines the order in
   which the defined |rules| are applied.

   .. admonition:: Parameters

       use_caching
           If `True`, cache results of :meth:`apply`.
           
   .. attribute:: rules

      `list` of all defined |rules|.
      

   .. method:: action_zero_coeff(self, ops)


   .. method:: action_ZeroOperator(self, ops)


   .. method:: action_IdentityOperator(self, ops)


   .. method:: action_BlockSpaceIdentityOperator(self, ops)


   .. method:: action_VectorArrayOperator(self, ops)


   .. method:: action_SecondOrderModelOperator(self, ops)


   .. method:: action_BlockDiagonalOperator(self, ops)


   .. method:: action_BlockOperatorBase(self, ops)


   .. method:: action_merge_low_rank_operators(self, ops)


   .. method:: action_merge_into_low_rank_updated_operator(self, ops)


   .. method:: action_call_assemble_lincomb_method(self, ops)


   .. method:: action_return_lincomb(self, ops)



