:mod:`pymor.analyticalproblems.elliptic`
========================================

.. py:module:: pymor.analyticalproblems.elliptic


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.analyticalproblems.elliptic.StationaryProblem




.. class:: StationaryProblem(domain, rhs=None, diffusion=None, advection=None, nonlinear_advection=None, nonlinear_advection_derivative=None, reaction=None, nonlinear_reaction=None, nonlinear_reaction_derivative=None, dirichlet_data=None, neumann_data=None, robin_data=None, outputs=None, parameter_ranges=None, name=None)


   Bases: :py:obj:`pymor.parameters.base.ParametricObject`

   Linear elliptic problem description.

   The problem consists in solving ::

       - ∇ ⋅ [d(x, μ) ∇ u(x, μ)] + ∇ ⋅ [f_l(x, μ)u(x, μ)]
       + ∇ ⋅ f_n(u(x, μ), μ) + c_l(x, μ) + c_n(u(x, μ), μ) = g(x, μ)

   for u.

   .. admonition:: Parameters

       domain
           A |DomainDescription| of the domain the problem is posed on.
       rhs
           The |Function| g. `rhs.dim_domain` has to agree with the
           dimension of `domain`, whereas `rhs.shape_range` has to be `()`.
       diffusion
           The |Function| d with `shape_range` of either `()` or
           `(dim domain, dim domain)`.
       advection
           The |Function| f_l, only depending on x, with `shape_range` of `(dim domain,)`.
       nonlinear_advection
           The |Function| f_n, only depending on u, with `shape_range` of `(dim domain,)`.
       nonlinear_advection_derivative
           The derivative of f_n, only depending on u, with respect to u.
       reaction
           The |Function| c_l, only depending on x, with `shape_range` of `()`.
       nonlinear_reaction
           The |Function| c_n, only depending on u, with `shape_range` of `()`.
       nonlinear_reaction_derivative
           The derivative of the |Function| c_n, only depending on u, with `shape_range` of `()`.
       dirichlet_data
           |Function| providing the Dirichlet boundary values.
       neumann_data
           |Function| providing the Neumann boundary values.
       robin_data
           Tuple of two |Functions| providing the Robin parameter and boundary values.
       outputs
           Tuple of additional output functionals to assemble. Each value must be a tuple
           of the form `(functional_type, data)` where `functional_type` is a string
           defining the type of functional to assemble and `data` is a |Function| holding
           the corresponding coefficient function. Currently implemented `functional_types`
           are:
           
               :l2:            Evaluate the l2-product with the given data function.
               :l2_boundary:   Evaluate the l2-product with the given data function
                               on the boundary.
       parameter_ranges
           Ranges of interest for the |Parameters| of the problem.
       name
           Name of the problem.
           
   .. attribute:: domain

   .. attribute:: rhs

   .. attribute:: diffusion

   .. attribute:: advection

   .. attribute:: nonlinear_advection

   .. attribute:: nonlinear_advection_derivative

   .. attribute:: reaction

   .. attribute:: nonlinear_reaction

   .. attribute:: nonlinear_reaction_derivative

   .. attribute:: dirichlet_data

   .. attribute:: neumann_data

   .. attribute:: robin_data

   .. attribute:: outputs

      

   .. method:: parameter_space(self)
      :property:



