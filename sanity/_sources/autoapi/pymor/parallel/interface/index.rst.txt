:mod:`pymor.parallel.interface`
===============================

.. py:module:: pymor.parallel.interface


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.parallel.interface.WorkerPool
   pymor.parallel.interface.RemoteObject




.. class:: WorkerPool

   Bases: :py:obj:`pymor.core.base.BasicObject`

   Interface for parallel worker pools.

   |WorkerPools| allow to easily parallelize algorithms which involve
   no or little communication between the workers at runtime. The interface
   methods give the user simple means to distribute data to
   workers (:meth:`~WorkerPool.push`, :meth:`~WorkerPool.scatter_array`,
   :meth:`~WorkerPool.scatter_list`) and execute functions on
   the distributed data in parallel (:meth:`~WorkerPool.apply`),
   collecting the return values from each function call. A
   single worker can be instructed to execute a function using the
   :meth:`WorkerPool.apply_only` method. Finally, a parallelized
   :meth:`~WorkerPool.map` function is available, which
   automatically scatters the data among the workers.

   All operations are performed synchronously.

   .. method:: __len__(self)
      :abstractmethod:

      The number of workers in the pool.


   .. method:: push(self, obj)
      :abstractmethod:

      Push a copy of `obj` to  all workers of the pool.

      A |RemoteObject| is returned as a handle to the pushed object.
      This object can be used as a keyword argument to :meth:`~WorkerPool.apply`,
      :meth:`~WorkerPool.apply_only`, :meth:`~WorkerPool.map`
      and will then be transparently mapped to the respective copy
      of the pushed object on the worker.

      |Immutable| objects will be pushed only once. If the same |immutable| object
      is pushed a second time, the returned |RemoteObject| will refer to the
      already transferred copy. It is therefore safe to use `push` to ensure
      that a given |immutable| object is available on the worker. No unnecessary
      copies will be created.

      .. admonition:: Parameters

          obj
              The object to push to all workers.
              
      .. admonition:: Returns

          A |RemoteObject| referring to the pushed data.
              


   .. method:: scatter_array(self, U, copy=True)
      :abstractmethod:

      Distribute |VectorArray| evenly among the workers.

      On each worker a |VectorArray| is created holding an (up to rounding) equal
      amount of vectors of `U`. The returned |RemoteObject| therefore refers
      to different data on each of the workers.

      .. admonition:: Parameters

          U
              The |VectorArray| to distribute.
          copy
              If `False`, `U` will be emptied during distribution of the vectors.
              
      .. admonition:: Returns

          A |RemoteObject| referring to the scattered data.
              


   .. method:: scatter_list(self, l)
      :abstractmethod:

      Distribute list of objects evenly among the workers.

      On each worker a `list` is created holding an (up to rounding) equal
      amount of objects of `l`. The returned |RemoteObject| therefore refers
      to different data on each of the workers.

      .. admonition:: Parameters

          l
              The list (sequence) of objects to distribute.
              
      .. admonition:: Returns

          A |RemoteObject| referring to the scattered data.
              


   .. method:: apply(self, function, *args, **kwargs)
      :abstractmethod:

      Apply function in parallel on each worker.

      This calls `function` on each worker in parallel, passing `args` as
      positional and `kwargs` as keyword arguments. Keyword arguments
      which are |RemoteObjects| are automatically mapped to the
      respective object on the worker. Moreover, keyword arguments which
      are |immutable| objects that have already been pushed to the workers
      will not be transmitted again. (|Immutable| objects which have not
      been pushed before will be transmitted and the remote copy will be
      destroyed after function execution.)

      .. admonition:: Parameters

          function
              The function to execute on each worker.
          args
              The positional arguments for `function`.
          kwargs
              The keyword arguments for `function`.
              
      .. admonition:: Returns

          List of return values of the function executions, ordered by
          worker number (from `0` to `len(pool) - 1`).
              


   .. method:: apply_only(self, function, worker, *args, **kwargs)
      :abstractmethod:

      Apply function on a single worker.

      This calls `function` on on the worker with number `worker`, passing
      `args` as positional and `kwargs` as keyword arguments. Keyword arguments
      which are |RemoteObjects| are automatically mapped to the
      respective object on the worker. Moreover, keyword arguments which
      are |immutable| objects that have already been pushed to the workers
      will not be transmitted again. (|Immutable| objects which have not
      been pushed before will be transmitted and the remote copy will be
      destroyed after function execution.)

      .. admonition:: Parameters

          function
              The function to execute.
          worker
              The worker on which to execute the function. (Number between
              `0` and `len(pool) - 1`.)
          args
              The positional arguments for `function`.
          kwargs
              The keyword arguments for `function`.
              
      .. admonition:: Returns

          Return value of the function execution.
              


   .. method:: map(self, function, *args, **kwargs)
      :abstractmethod:

      Parallel version of the builtin :func:`map` function.

      Each positional argument (after `function`) must be a sequence
      of same length n. `map` calls `function` in parallel on each of these n
      positional argument combinations, always passing `kwargs` as keyword
      arguments.  Keyword arguments which are |RemoteObjects| are automatically
      mapped to the respective object on the worker. Moreover, keyword arguments
      which are |immutable| objects that have already been pushed to the workers
      will not be transmitted again. (|Immutable| objects which have not
      been pushed before will be transmitted and the remote copy will be
      destroyed after function execution.)

      .. admonition:: Parameters

          function
              The function to execute on each worker.
          args
              The sequences of positional arguments for `function`.
          kwargs
              The keyword arguments for `function`.
              
      .. admonition:: Returns

          List of return values of the function executions, ordered by
          the sequence of positional arguments.
              



.. class:: RemoteObject

   Handle to remote data on the workers of a |WorkerPool|.

   See documentation of :class:`WorkerPool` for usage
   of these handles in conjunction with :meth:`~WorkerPool.apply`,
   :meth:`~WorkerPool.scatter_array`,
   :meth:`~WorkerPool.scatter_list`.

   Remote objects can be used as a context manager: when leaving the
   context, the remote object's :meth:`~RemoteObject.remove`
   method is called to ensure proper cleanup of remote resources.

   .. attribute:: removed

      `True`, after :meth:`remove` has been called.
      

   .. method:: _remove(self)
      :abstractmethod:

      Actual implementation of 'remove'.


   .. method:: remove(self)

      Remove the remote object from the workers.

      Remove the object this handle refers to from all workers.
      Note that the object will only be destroyed if no other
      object on the worker holds a reference to that object.
      Moreover, |immutable| objects will only be destroyed if
      :meth:`remove` has been called on *all* |RemoteObjects|
      which refer to the object (see :meth:`~WorkerPool.push`).


   .. method:: __enter__(self)


   .. method:: __exit__(self, exc_type, exc_val, exc_tb)


   .. method:: __del__(self)



