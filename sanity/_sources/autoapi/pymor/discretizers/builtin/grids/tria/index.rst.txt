:mod:`pymor.discretizers.builtin.grids.tria`
============================================

.. py:module:: pymor.discretizers.builtin.grids.tria


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.discretizers.builtin.grids.tria.TriaGrid




.. class:: TriaGrid(num_intervals=(2, 2), domain=([0, 0], [1, 1]), identify_left_right=False, identify_bottom_top=False)


   Bases: :py:obj:`pymor.discretizers.builtin.grids.interfaces.GridWithOrthogonalCenters`

   Basic implementation of a triangular grid on a rectangular domain.

   The global face, edge and vertex indices are given as follows ::

                6---------10----------7---------11----------8
                | \                 / | \                 / |
                |    22   10    18    |    23   11    19    |
                |       \     /       |       \     /       |
                3    14   11     6    4    15   12     7    5
                |       /     \       |       /     \       |
                |    14    2    26    |    15    3    27    |
                | /                 \ | /                 \ |
                3----------8----------4----------9----------5
                | \                 / | \                 / |
                |    20    8    16    |    21    9    17    |
                |       \     /       |       \     /       |
                0    12    9     4    1    13   10     5    2
                |       /     \       |       /     \       |
                |    12    0    24    |    13    1    25    |
                | /                 \ | /                 \ |
                0----------6----------1----------7----------2

   .. admonition:: Parameters

       num_intervals
           Tuple `(n0, n1)` determining a grid with `n0` x `n1` codim-0 entities.
       domain
           Tuple `(ll, ur)` where `ll` defines the lower left and `ur` the upper right
           corner of the domain.
       identify_left_right
           If `True`, the left and right boundaries are identified, i.e. the left-most
           codim-0 entities become neighbors of the right-most codim-0 entities.
       identify_bottom_top
           If `True`, the bottom and top boundaries are identified, i.e. the bottom-most
           codim-0 entities become neighbors of the top-most codim-0 entities.
           

   .. attribute:: dim
      :annotation: = 2

      

   .. attribute:: reference_element
      

      

   .. method:: __reduce__(self)

      Helper for pickle.


   .. method:: __str__(self)

      Return str(self).


   .. method:: size(self, codim=0)

      The number of entities of codimension `codim`.


   .. method:: subentities(self, codim, subentity_codim)

      `retval[e,s]` is the global index of the `s`-th codim-`subentity_codim` subentity of the
      codim-`codim` entity with global index `e`.

      The ordering of `subentities(0, subentity_codim)[e]` has to correspond, w.r.t. the embedding
      of `e`, to the local ordering inside the reference element.

      For `codim > 0`, we provide a default implementation by calculating the subentities of `e`
      as follows:

          1. Find the `codim-1` parent entity `e_0` of `e` with minimal global index
          2. Lookup the local indices of the subentities of `e` inside `e_0` using the reference
             element.
          3. Map these local indices to global indices using
             `subentities(codim - 1, subentity_codim)`.

      This procedures assures that `subentities(codim, subentity_codim)[e]` has the right ordering
      w.r.t. the embedding determined by `e_0`, which agrees with what is returned by
      `embeddings(codim)`


   .. method:: embeddings(self, codim=0)

      Returns tuple `(A, B)` where `A[e]` and `B[e]` are the linear part and the translation
      part of the map from the reference element of `e` to `e`.

      For `codim > 0`, we provide a default implementation by taking the embedding of the codim-1
      parent entity `e_0` of `e` with lowest global index and composing it with the
      subentity_embedding of `e` into `e_0` determined by the reference element.


   .. method:: bounding_box(self)

      Returns a `(2, dim)`-shaped array containing lower/upper bounding box coordinates.


   .. method:: orthogonal_centers(self)

      `retval[e]` is a point inside the codim-0 entity with global index `e` such that the line
      segment from `retval[e]` to `retval[e2]` is always orthogonal to the codim-1 entity shared
      by the codim-0 entities with global index `e` and `e2`.

      (This is mainly useful for gradient approximation in finite volume schemes.)


   .. method:: visualize(self, U, codim=2, **kwargs)

      Visualize scalar data associated to the grid as a patch plot.

      .. admonition:: Parameters

          U
              |NumPy array| of the data to visualize. If `U.dim == 2 and len(U) > 1`, the
              data is visualized as a time series of plots. Alternatively, a tuple of
              |Numpy arrays| can be provided, in which case a subplot is created for
              each entry of the tuple. The lengths of all arrays have to agree.
          codim
              The codimension of the entities the data in `U` is attached to (either 0 or 2).
          kwargs
              See :func:`~pymor.discretizers.builtin.gui.visualizers.PatchVisualizer.visualize`
              



