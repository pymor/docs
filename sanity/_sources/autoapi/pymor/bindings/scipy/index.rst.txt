:mod:`pymor.bindings.scipy`
===========================

.. py:module:: pymor.bindings.scipy


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.bindings.scipy.solver_options
   pymor.bindings.scipy.apply_inverse
   pymor.bindings.scipy.matrix_astype_nocopy
   pymor.bindings.scipy.lyap_lrcf_solver_options
   pymor.bindings.scipy.solve_lyap_lrcf
   pymor.bindings.scipy.lyap_dense_solver_options
   pymor.bindings.scipy.solve_lyap_dense
   pymor.bindings.scipy.ricc_lrcf_solver_options
   pymor.bindings.scipy.solve_ricc_lrcf
   pymor.bindings.scipy.pos_ricc_lrcf_solver_options
   pymor.bindings.scipy.solve_pos_ricc_lrcf



.. function:: solver_options(bicgstab_tol=1e-15, bicgstab_maxiter=None, spilu_drop_tol=0.0001, spilu_fill_factor=10, spilu_drop_rule=None, spilu_permc_spec='COLAMD', spsolve_permc_spec='COLAMD', spsolve_keep_factorization=True, lgmres_tol=1e-05, lgmres_maxiter=1000, lgmres_inner_m=39, lgmres_outer_k=3, least_squares_lsmr_damp=0.0, least_squares_lsmr_atol=1e-06, least_squares_lsmr_btol=1e-06, least_squares_lsmr_conlim=100000000.0, least_squares_lsmr_maxiter=None, least_squares_lsmr_show=False, least_squares_lsqr_damp=0.0, least_squares_lsqr_atol=1e-06, least_squares_lsqr_btol=1e-06, least_squares_lsqr_conlim=100000000.0, least_squares_lsqr_iter_lim=None, least_squares_lsqr_show=False)

   Returns available solvers with default |solver_options| for the SciPy backend.

   .. admonition:: Parameters

       bicgstab_tol
           See :func:`scipy.sparse.linalg.bicgstab`.
       bicgstab_maxiter
           See :func:`scipy.sparse.linalg.bicgstab`.
       spilu_drop_tol
           See :func:`scipy.sparse.linalg.spilu`.
       spilu_fill_factor
           See :func:`scipy.sparse.linalg.spilu`.
       spilu_drop_rule
           See :func:`scipy.sparse.linalg.spilu`.
       spilu_permc_spec
           See :func:`scipy.sparse.linalg.spilu`.
       spsolve_permc_spec
           See :func:`scipy.sparse.linalg.spsolve`.
       spsolve_keep_factorization
           See :func:`scipy.sparse.linalg.spsolve`.
       lgmres_tol
           See :func:`scipy.sparse.linalg.lgmres`.
       lgmres_maxiter
           See :func:`scipy.sparse.linalg.lgmres`.
       lgmres_inner_m
           See :func:`scipy.sparse.linalg.lgmres`.
       lgmres_outer_k
           See :func:`scipy.sparse.linalg.lgmres`.
       least_squares_lsmr_damp
           See :func:`scipy.sparse.linalg.lsmr`.
       least_squares_lsmr_atol
           See :func:`scipy.sparse.linalg.lsmr`.
       least_squares_lsmr_btol
           See :func:`scipy.sparse.linalg.lsmr`.
       least_squares_lsmr_conlim
           See :func:`scipy.sparse.linalg.lsmr`.
       least_squares_lsmr_maxiter
           See :func:`scipy.sparse.linalg.lsmr`.
       least_squares_lsmr_show
           See :func:`scipy.sparse.linalg.lsmr`.
       least_squares_lsqr_damp
           See :func:`scipy.sparse.linalg.lsqr`.
       least_squares_lsqr_atol
           See :func:`scipy.sparse.linalg.lsqr`.
       least_squares_lsqr_btol
           See :func:`scipy.sparse.linalg.lsqr`.
       least_squares_lsqr_conlim
           See :func:`scipy.sparse.linalg.lsqr`.
       least_squares_lsqr_iter_lim
           See :func:`scipy.sparse.linalg.lsqr`.
       least_squares_lsqr_show
           See :func:`scipy.sparse.linalg.lsqr`.
           
   .. admonition:: Returns

       A dict of available solvers with default |solver_options|.
           


.. function:: apply_inverse(op, V, initial_guess=None, options=None, least_squares=False, check_finite=True, default_solver='scipy_spsolve', default_least_squares_solver='scipy_least_squares_lsmr')

   Solve linear equation system.

   Applies the inverse of `op` to the vectors in `V` using SciPy.

   .. admonition:: Parameters

       op
           The linear, non-parametric |Operator| to invert.
       V
           |VectorArray| of right-hand sides for the equation system.
       initial_guess
           |VectorArray| with the same length as `V` containing initial guesses
           for the solution.  Some implementations of `apply_inverse` may
           ignore this parameter.  If `None` a solver-dependent default is used.
       options
           The |solver_options| to use (see :func:`solver_options`).
       least_squares
           If `True`, return least squares solution.
       check_finite
           Test if solution only contains finite values.
       default_solver
           Default solver to use (scipy_spsolve, scipy_bicgstab, scipy_bicgstab_spilu,
           scipy_lgmres, scipy_least_squares_lsmr, scipy_least_squares_lsqr).
       default_least_squares_solver
           Default solver to use for least squares problems (scipy_least_squares_lsmr,
           scipy_least_squares_lsqr).
           
   .. admonition:: Returns

       |VectorArray| of the solution vectors.
           


.. function:: matrix_astype_nocopy(matrix, dtype)


.. function:: lyap_lrcf_solver_options()

   Return available Lyapunov solvers with default options for the SciPy backend.

   .. admonition:: Returns

       A dict of available solvers with default solver options.
           


.. function:: solve_lyap_lrcf(A, E, B, trans=False, options=None)

   Compute an approximate low-rank solution of a Lyapunov equation.

   See :func:`pymor.algorithms.lyapunov.solve_lyap_lrcf` for a general
   description.

   This function uses `scipy.linalg.solve_continuous_lyapunov`, which
   is a dense solver for Lyapunov equations with E=I.
   Therefore, we assume A and E can be converted to |NumPy arrays|
   using :func:`~pymor.algorithms.to_matrix.to_matrix` and that
   `B.to_numpy` is implemented.

   .. note::
       If E is not `None`, the problem will be reduced to a standard
       continuous-time algebraic Lyapunov equation by inverting E.

   .. admonition:: Parameters

       A
           The non-parametric |Operator| A.
       E
           The non-parametric |Operator| E or `None`.
       B
           The operator B as a |VectorArray| from `A.source`.
       trans
           Whether the first |Operator| in the Lyapunov equation is
           transposed.
       options
           The solver options to use (see
           :func:`lyap_lrcf_solver_options`).
           
   .. admonition:: Returns

       Z
           Low-rank Cholesky factor of the Lyapunov equation solution,
           |VectorArray| from `A.source`.
           


.. function:: lyap_dense_solver_options()

   Return available dense Lyapunov solvers with default options for the SciPy backend.

   .. admonition:: Returns

       A dict of available solvers with default solver options.
           


.. function:: solve_lyap_dense(A, E, B, trans=False, options=None)

   Compute the solution of a Lyapunov equation.

   See :func:`pymor.algorithms.lyapunov.solve_lyap_dense` for a
   general description.

   This function uses `scipy.linalg.solve_continuous_lyapunov`, which
   is a dense solver for Lyapunov equations with E=I.

   .. note::
       If E is not `None`, the problem will be reduced to a standard
       continuous-time algebraic Lyapunov equation by inverting E.

   .. admonition:: Parameters

       A
           The operator A as a 2D |NumPy array|.
       E
           The operator E as a 2D |NumPy array| or `None`.
       B
           The operator B as a 2D |NumPy array|.
       trans
           Whether the first operator in the Lyapunov equation is
           transposed.
       options
           The solver options to use (see
           :func:`lyap_dense_solver_options`).
           
   .. admonition:: Returns

       X
           Lyapunov equation solution as a |NumPy array|.
           


.. function:: ricc_lrcf_solver_options()

   Return available Riccati solvers with default options for the SciPy backend.

   .. admonition:: Returns

       A dict of available solvers with default solver options.
           


.. function:: solve_ricc_lrcf(A, E, B, C, R=None, trans=False, options=None)

   Compute an approximate low-rank solution of a Riccati equation.

   See :func:`pymor.algorithms.riccati.solve_ricc_lrcf` for a general
   description.

   This function uses `scipy.linalg.solve_continuous_are`, which
   is a dense solver.
   Therefore, we assume all |Operators| and |VectorArrays| can be
   converted to |NumPy arrays| using
   :func:`~pymor.algorithms.to_matrix.to_matrix` and
   :func:`~pymor.vectorarrays.interface.VectorArray.to_numpy`.

   .. admonition:: Parameters

       A
           The non-parametric |Operator| A.
       E
           The non-parametric |Operator| E or `None`.
       B
           The operator B as a |VectorArray| from `A.source`.
       C
           The operator C as a |VectorArray| from `A.source`.
       R
           The operator R as a 2D |NumPy array| or `None`.
       trans
           Whether the first |Operator| in the Riccati equation is
           transposed.
       options
           The solver options to use (see :func:`ricc_lrcf_solver_options`).
           
   .. admonition:: Returns

       Z
           Low-rank Cholesky factor of the Riccati equation solution,
           |VectorArray| from `A.source`.
           


.. function:: pos_ricc_lrcf_solver_options()

   Return available positive Riccati solvers with default options for the SciPy backend.

   .. admonition:: Returns

       A dict of available solvers with default solver options.
           


.. function:: solve_pos_ricc_lrcf(A, E, B, C, R=None, trans=False, options=None)

   Compute an approximate low-rank solution of a positive Riccati equation.

   See :func:`pymor.algorithms.riccati.solve_pos_ricc_lrcf` for a
   general description.

   This function uses `scipy.linalg.solve_continuous_are`, which
   is a dense solver.
   Therefore, we assume all |Operators| and |VectorArrays| can be
   converted to |NumPy arrays| using
   :func:`~pymor.algorithms.to_matrix.to_matrix` and
   :func:`~pymor.vectorarrays.interface.VectorArray.to_numpy`.

   .. admonition:: Parameters

       A
           The non-parametric |Operator| A.
       E
           The non-parametric |Operator| E or `None`.
       B
           The operator B as a |VectorArray| from `A.source`.
       C
           The operator C as a |VectorArray| from `A.source`.
       R
           The operator R as a 2D |NumPy array| or `None`.
       trans
           Whether the first |Operator| in the positive Riccati equation is
           transposed.
       options
           The solver options to use (see
           :func:`pos_ricc_lrcf_solver_options`).
           
   .. admonition:: Returns

       Z
           Low-rank Cholesky factor of the positive Riccati equation
           solution, |VectorArray| from `A.source`.
           


