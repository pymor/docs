:mod:`pymor.analyticalproblems.domaindescriptions`
==================================================

.. py:module:: pymor.analyticalproblems.domaindescriptions


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.analyticalproblems.domaindescriptions.DomainDescription
   pymor.analyticalproblems.domaindescriptions.RectDomain
   pymor.analyticalproblems.domaindescriptions.CylindricalDomain
   pymor.analyticalproblems.domaindescriptions.TorusDomain
   pymor.analyticalproblems.domaindescriptions.LineDomain
   pymor.analyticalproblems.domaindescriptions.CircleDomain
   pymor.analyticalproblems.domaindescriptions.PolygonalDomain
   pymor.analyticalproblems.domaindescriptions.CircularSectorDomain
   pymor.analyticalproblems.domaindescriptions.DiscDomain




Attributes
~~~~~~~~~~

.. autoapisummary::

   pymor.analyticalproblems.domaindescriptions.KNOWN_BOUNDARY_TYPES


.. data:: KNOWN_BOUNDARY_TYPES
   

   

.. class:: DomainDescription


   Bases: :py:obj:`pymor.core.base.ImmutableObject`

   Describes a geometric domain along with its boundary.

   .. attribute:: dim

      The dimension of the domain

   .. attribute:: boundary_types

      Set of boundary types the domain has.
      

   .. method:: has_dirichlet(self)
      :property:


   .. method:: has_neumann(self)
      :property:


   .. method:: has_robin(self)
      :property:



.. class:: RectDomain(domain=([0, 0], [1, 1]), left='dirichlet', right='dirichlet', top='dirichlet', bottom='dirichlet')


   Bases: :py:obj:`DomainDescription`

   Describes a rectangular domain.

   Boundary types can be associated edgewise.

   .. admonition:: Parameters

       domain
           List of two points defining the lower-left and upper-right corner
           of the domain.
       left
           The boundary type of the left edge.
       right
           The boundary type of the right edge.
       top
           The boundary type of the top edge.
       bottom
           The boundary type of the bottom edge.
           
   .. attribute:: domain

   .. attribute:: left

   .. attribute:: right

   .. attribute:: top

   .. attribute:: bottom

      

   .. attribute:: dim
      :annotation: = 2

      

   .. method:: lower_left(self)
      :property:


   .. method:: upper_right(self)
      :property:


   .. method:: width(self)
      :property:


   .. method:: height(self)
      :property:


   .. method:: volume(self)
      :property:


   .. method:: diameter(self)
      :property:



.. class:: CylindricalDomain(domain=([0, 0], [1, 1]), top='dirichlet', bottom='dirichlet')


   Bases: :py:obj:`DomainDescription`

   Describes a cylindrical domain.

   Boundary types can be associated edgewise.

   .. admonition:: Parameters

       domain
           List of two points defining the lower-left and upper-right corner
           of the domain. The left and right edge are identified.
       top
           The boundary type of the top edge.
       bottom
           The boundary type of the bottom edge.
           
   .. attribute:: domain

   .. attribute:: top

   .. attribute:: bottom

      

   .. attribute:: dim
      :annotation: = 2

      

   .. method:: lower_left(self)
      :property:


   .. method:: upper_right(self)
      :property:


   .. method:: width(self)
      :property:


   .. method:: height(self)
      :property:


   .. method:: volume(self)
      :property:


   .. method:: diameter(self)
      :property:



.. class:: TorusDomain(domain=([0, 0], [1, 1]))


   Bases: :py:obj:`DomainDescription`

   Describes a domain with the topology of a torus.

   .. admonition:: Parameters

       domain
           List of two points defining the lower-left and upper-right corner
           of the domain. The left and right edge are identified, as well as the
           bottom and top edge
           
   .. attribute:: domain

      

   .. attribute:: dim
      :annotation: = 2

      

   .. method:: lower_left(self)
      :property:


   .. method:: upper_right(self)
      :property:


   .. method:: width(self)
      :property:


   .. method:: height(self)
      :property:


   .. method:: volume(self)
      :property:


   .. method:: diameter(self)
      :property:



.. class:: LineDomain(domain=(0, 1), left='dirichlet', right='dirichlet')


   Bases: :py:obj:`DomainDescription`

   Describes an interval domain.

   Boundary types can be associated edgewise.

   .. admonition:: Parameters

       domain
           List [x_l, x_r] providing the left and right endpoint.
       left
           The boundary type of the left endpoint.
       right
           The boundary type of the right endpoint.
           
   .. attribute:: domain

   .. attribute:: left

   .. attribute:: right

      

   .. attribute:: dim
      :annotation: = 1

      

   .. method:: width(self)
      :property:



.. class:: CircleDomain(domain=(0, 1))


   Bases: :py:obj:`DomainDescription`

   Describes a domain with the topology of a circle, i.e. a line with
   identified end points.

   .. admonition:: Parameters

       domain
           List [x_l, x_r] providing the left and right endpoint.
           
   .. attribute:: domain

      

   .. attribute:: dim
      :annotation: = 1

      

   .. method:: width(self)
      :property:



.. class:: PolygonalDomain(points, boundary_types, holes=None)


   Bases: :py:obj:`DomainDescription`

   Describes a domain with a polygonal boundary and polygonal holes inside the domain.

   .. admonition:: Parameters

       points
           List of points [x_0, x_1] that describe the polygonal chain that bounds the domain.
       boundary_types
           Either a dictionary `{boundary_type: [i_0, ...], boundary_type: [j_0, ...], ...}`
           with `i_0, ...` being the ids of boundary segments for a given boundary type
           (`0` is the line connecting point `0` to `1`, `1` is the line connecting point `1` to `2`
           etc.), or a function that returns the boundary type for a given coordinate.
       holes
           List of lists of points that describe the polygonal chains that bound the holes
           inside the domain.
           
   .. attribute:: points

   .. attribute:: boundary_types

   .. attribute:: holes

      

   .. attribute:: dim
      :annotation: = 2

      


.. class:: CircularSectorDomain(angle, radius, arc='dirichlet', radii='dirichlet', num_points=100)


   Bases: :py:obj:`PolygonalDomain`

   Describes a circular sector domain of variable radius.

   .. admonition:: Parameters

       angle
           The angle between 0 and 2*pi of the circular sector.
       radius
           The radius of the circular sector.
       arc
           The boundary type of the arc.
       radii
           The boundary type of the two radii.
       num_points
           The number of points of the polygonal chain approximating the circular
           boundary.
           
   .. attribute:: angle

   .. attribute:: radius

   .. attribute:: arc

   .. attribute:: radii

   .. attribute:: num_points

      


.. class:: DiscDomain(radius, boundary='dirichlet', num_points=100)


   Bases: :py:obj:`PolygonalDomain`

   Describes a disc domain of variable radius.

   .. admonition:: Parameters

       radius
           The radius of the disc.
       boundary
           The boundary type of the boundary.
       num_points
           The number of points of the polygonal chain approximating the boundary.
           
   .. attribute:: radius

   .. attribute:: boundary

   .. attribute:: num_points

      


