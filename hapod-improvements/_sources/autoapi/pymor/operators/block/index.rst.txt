:mod:`pymor.operators.block`
============================

.. py:module:: pymor.operators.block


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.operators.block.BlockOperatorBase
   pymor.operators.block.BlockOperator
   pymor.operators.block.BlockRowOperator
   pymor.operators.block.BlockColumnOperator
   pymor.operators.block.BlockProjectionOperator
   pymor.operators.block.BlockEmbeddingOperator
   pymor.operators.block.BlockDiagonalOperator
   pymor.operators.block.SecondOrderModelOperator




.. class:: BlockOperatorBase(blocks)


   Bases: :py:obj:`pymor.operators.interface.Operator`

   Interface for |Parameter| dependent discrete operators.

   An operator in pyMOR is simply a mapping which for any given
   |parameter values| maps vectors from its `source` |VectorSpace|
   to vectors in its `range` |VectorSpace|.

   Note that there is no special distinction between functionals
   and operators in pyMOR. A functional is simply an operator with
   |NumpyVectorSpace| `(1)` as its `range` |VectorSpace|.

   .. attribute:: solver_options

      If not `None`, a dict which can contain the following keys:
      
      :'inverse':           solver options used for
                            :meth:`~Operator.apply_inverse`
      :'inverse_adjoint':   solver options used for
                            :meth:`~Operator.apply_inverse_adjoint`
      :'jacobian':          solver options for the operators returned
                            by :meth:`~Operator.jacobian`
                            (has no effect for linear operators)
      
      If `solver_options` is `None` or a dict entry is missing
      or `None`, default options are used.
      The interpretation of the given solver options is up to
      the operator at hand. In general, values in `solver_options`
      should either be strings (indicating a solver type) or
      dicts of options, usually with an entry `'type'` which
      specifies the solver type to use and further items which
      configure this solver.

   .. attribute:: linear

      `True` if the operator is linear.

   .. attribute:: source

      The source |VectorSpace|.

   .. attribute:: range

      The range |VectorSpace|.

   .. attribute:: H

      The adjoint operator, i.e. ::
      
          self.H.apply(V, mu) == self.apply_adjoint(V, mu)
      
      for all V, mu.
      

   .. method:: _operators(self)

      Iterator over operators.


   .. method:: apply(self, U, mu=None)

      Apply the operator to a |VectorArray|.

      .. admonition:: Parameters

          U
              |VectorArray| of vectors to which the operator is applied.
          mu
              The |parameter values| for which to evaluate the operator.
              
      .. admonition:: Returns

          |VectorArray| of the operator evaluations.
              


   .. method:: apply_adjoint(self, V, mu=None)

      Apply the adjoint operator.

      For any given linear |Operator| `op`, |parameter values| `mu` and
      |VectorArrays| `U`, `V` in the :attr:`~Operator.source`
      resp. :attr:`~Operator.range` we have::

          op.apply_adjoint(V, mu).dot(U) == V.inner(op.apply(U, mu))

      Thus, when `op` is represented by a matrix `M`, `apply_adjoint` is
      given by left-multplication of (the complex conjugate of) `M` with `V`.

      .. admonition:: Parameters

          V
              |VectorArray| of vectors to which the adjoint operator is applied.
          mu
              The |parameter values| for which to apply the adjoint operator.
              
      .. admonition:: Returns

          |VectorArray| of the adjoint operator evaluations.
              


   .. method:: assemble(self, mu=None)

      Assemble the operator for given |parameter values|.

      The result of the method strongly depends on the given operator.
      For instance, a matrix-based operator will assemble its matrix, a |LincombOperator|
      will try to form the linear combination of its operators, whereas an arbitrary
      operator might simply return a
      :class:`~pymor.operators.constructions.FixedParameterOperator`.
      The only assured property of the assembled operator is that it no longer
      depends on a |Parameter|.

      .. admonition:: Parameters

          mu
              The |parameter values| for which to assemble the operator.
              
      .. admonition:: Returns

          Parameter-independent, assembled |Operator|.
              


   .. method:: as_range_array(self, mu=None)

      Return a |VectorArray| representation of the operator in its range space.

      In the case of a linear operator with |NumpyVectorSpace| as
      :attr:`~Operator.source`, this method returns for given |parameter values|
      `mu` a |VectorArray| `V` in the operator's :attr:`~Operator.range`,
      such that ::

          V.lincomb(U.to_numpy()) == self.apply(U, mu)

      for all |VectorArrays| `U`.

      .. admonition:: Parameters

          mu
              The |parameter values| for which to return the |VectorArray|
              representation.
              
      .. admonition:: Returns

          V
              The |VectorArray| defined above.
              


   .. method:: as_source_array(self, mu=None)

      Return a |VectorArray| representation of the operator in its source space.

      In the case of a linear operator with |NumpyVectorSpace| as
      :attr:`~Operator.range`, this method returns for given |parameter values|
      `mu` a |VectorArray| `V` in the operator's :attr:`~Operator.source`,
      such that ::

          self.range.make_array(V.inner(U).T) == self.apply(U, mu)

      for all |VectorArrays| `U`.

      .. admonition:: Parameters

          mu
              The |parameter values| for which to return the |VectorArray|
              representation.
              
      .. admonition:: Returns

          V
              The |VectorArray| defined above.
              


   .. method:: d_mu(self, parameter, index=0)

      Return the operator's derivative with respect to a given parameter.

      .. admonition:: Parameters

          parameter
              The parameter w.r.t. which to return the derivative.
          index
              Index of the parameter's component w.r.t which to return the derivative.
              
      .. admonition:: Returns

          New |Operator| representing the partial derivative.
              



.. class:: BlockOperator(blocks)


   Bases: :py:obj:`BlockOperatorBase`

   A matrix of arbitrary |Operators|.

   This operator can be :meth:`applied <pymor.operators.interface.Operator.apply>`
   to a compatible :class:`BlockVectorArrays <pymor.vectorarrays.block.BlockVectorArray>`.

   .. admonition:: Parameters

       blocks
           Two-dimensional array-like where each entry is an |Operator| or `None`.
           

   .. attribute:: blocked_source
      :annotation: = True

      

   .. attribute:: blocked_range
      :annotation: = True

      


.. class:: BlockRowOperator(blocks)


   Bases: :py:obj:`BlockOperatorBase`

   A row vector of arbitrary |Operators|.

   .. attribute:: blocked_source
      :annotation: = True

      

   .. attribute:: blocked_range
      :annotation: = False

      


.. class:: BlockColumnOperator(blocks)


   Bases: :py:obj:`BlockOperatorBase`

   A column vector of arbitrary |Operators|.

   .. attribute:: blocked_source
      :annotation: = False

      

   .. attribute:: blocked_range
      :annotation: = True

      


.. class:: BlockProjectionOperator(block_space, component)


   Bases: :py:obj:`BlockRowOperator`

   A row vector of arbitrary |Operators|.


.. class:: BlockEmbeddingOperator(block_space, component)


   Bases: :py:obj:`BlockColumnOperator`

   A column vector of arbitrary |Operators|.


.. class:: BlockDiagonalOperator(blocks)


   Bases: :py:obj:`BlockOperator`

   Block diagonal |Operator| of arbitrary |Operators|.

   This is a specialization of :class:`BlockOperator` for the
   block diagonal case.

   .. method:: apply(self, U, mu=None)

      Apply the operator to a |VectorArray|.

      .. admonition:: Parameters

          U
              |VectorArray| of vectors to which the operator is applied.
          mu
              The |parameter values| for which to evaluate the operator.
              
      .. admonition:: Returns

          |VectorArray| of the operator evaluations.
              


   .. method:: apply_adjoint(self, V, mu=None)

      Apply the adjoint operator.

      For any given linear |Operator| `op`, |parameter values| `mu` and
      |VectorArrays| `U`, `V` in the :attr:`~Operator.source`
      resp. :attr:`~Operator.range` we have::

          op.apply_adjoint(V, mu).dot(U) == V.inner(op.apply(U, mu))

      Thus, when `op` is represented by a matrix `M`, `apply_adjoint` is
      given by left-multplication of (the complex conjugate of) `M` with `V`.

      .. admonition:: Parameters

          V
              |VectorArray| of vectors to which the adjoint operator is applied.
          mu
              The |parameter values| for which to apply the adjoint operator.
              
      .. admonition:: Returns

          |VectorArray| of the adjoint operator evaluations.
              


   .. method:: apply_inverse(self, V, mu=None, initial_guess=None, least_squares=False)

      Apply the inverse operator.

      .. admonition:: Parameters

          V
              |VectorArray| of vectors to which the inverse operator is applied.
          mu
              The |parameter values| for which to evaluate the inverse operator.
          initial_guess
              |VectorArray| with the same length as `V` containing initial guesses
              for the solution.  Some implementations of `apply_inverse` may
              ignore this parameter.  If `None` a solver-dependent default is used.
          least_squares
              If `True`, solve the least squares problem::
              
                  u = argmin ||op(u) - v||_2.
              
              Since for an invertible operator the least squares solution agrees
              with the result of the application of the inverse operator,
              setting this option should, in general, have no effect on the result
              for those operators. However, note that when no appropriate
              |solver_options| are set for the operator, most implementations
              will choose a least squares solver by default which may be
              undesirable.
              
      .. admonition:: Returns

          |VectorArray| of the inverse operator evaluations.
              
      .. admonition:: Raises

          InversionError
              The operator could not be inverted.
              


   .. method:: apply_inverse_adjoint(self, U, mu=None, initial_guess=None, least_squares=False)

      Apply the inverse adjoint operator.

      .. admonition:: Parameters

          U
              |VectorArray| of vectors to which the inverse adjoint operator is applied.
          mu
              The |parameter values| for which to evaluate the inverse adjoint operator.
          initial_guess
              |VectorArray| with the same length as `U` containing initial guesses
              for the solution.  Some implementations of `apply_inverse_adjoint` may
              ignore this parameter.  If `None` a solver-dependent default is used.
          least_squares
              If `True`, solve the least squares problem::
              
                  v = argmin ||op^*(v) - u||_2.
              
              Since for an invertible operator the least squares solution agrees
              with the result of the application of the inverse operator,
              setting this option should, in general, have no effect on the result
              for those operators. However, note that when no appropriate
              |solver_options| are set for the operator, most operator
              implementations will choose a least squares solver by default which
              may be undesirable.
              
      .. admonition:: Returns

          |VectorArray| of the inverse adjoint operator evaluations.
              
      .. admonition:: Raises

          InversionError
              The operator could not be inverted.
              


   .. method:: assemble(self, mu=None)

      Assemble the operator for given |parameter values|.

      The result of the method strongly depends on the given operator.
      For instance, a matrix-based operator will assemble its matrix, a |LincombOperator|
      will try to form the linear combination of its operators, whereas an arbitrary
      operator might simply return a
      :class:`~pymor.operators.constructions.FixedParameterOperator`.
      The only assured property of the assembled operator is that it no longer
      depends on a |Parameter|.

      .. admonition:: Parameters

          mu
              The |parameter values| for which to assemble the operator.
              
      .. admonition:: Returns

          Parameter-independent, assembled |Operator|.
              



.. class:: SecondOrderModelOperator(alpha, beta, A, B)


   Bases: :py:obj:`BlockOperator`

   BlockOperator appearing in SecondOrderModel.to_lti().

   This represents a block operator

   .. math::
       \mathcal{A} =
       \begin{bmatrix}
           \alpha I & \beta I \\
           B & A
       \end{bmatrix},

   which satisfies

   .. math::
       \mathcal{A}^H
       &=
       \begin{bmatrix}
           \overline{\alpha} I & B^H \\
           \overline{\beta} I & A^H
       \end{bmatrix}, \\
       \mathcal{A}^{-1}
       &=
       \begin{bmatrix}
           (\alpha A - \beta B)^{-1} A & -\beta (\alpha A - \beta B)^{-1} \\
           -(\alpha A - \beta B)^{-1} B & \alpha (\alpha A - \beta B)^{-1}
       \end{bmatrix}, \\
       \mathcal{A}^{-H}
       &=
       \begin{bmatrix}
           A^H (\alpha A - \beta B)^{-H}
           & -B^H (\alpha A - \beta B)^{-H} \\
           -\overline{\beta} (\alpha A - \beta B)^{-H}
           & \overline{\alpha} (\alpha A - \beta B)^{-H}
       \end{bmatrix}.

   .. admonition:: Parameters

       alpha
           Scalar.
       beta
           Scalar.
       A
           |Operator|.
       B
           |Operator|.
           

   .. method:: apply(self, U, mu=None)

      Apply the operator to a |VectorArray|.

      .. admonition:: Parameters

          U
              |VectorArray| of vectors to which the operator is applied.
          mu
              The |parameter values| for which to evaluate the operator.
              
      .. admonition:: Returns

          |VectorArray| of the operator evaluations.
              


   .. method:: apply_adjoint(self, V, mu=None)

      Apply the adjoint operator.

      For any given linear |Operator| `op`, |parameter values| `mu` and
      |VectorArrays| `U`, `V` in the :attr:`~Operator.source`
      resp. :attr:`~Operator.range` we have::

          op.apply_adjoint(V, mu).dot(U) == V.inner(op.apply(U, mu))

      Thus, when `op` is represented by a matrix `M`, `apply_adjoint` is
      given by left-multplication of (the complex conjugate of) `M` with `V`.

      .. admonition:: Parameters

          V
              |VectorArray| of vectors to which the adjoint operator is applied.
          mu
              The |parameter values| for which to apply the adjoint operator.
              
      .. admonition:: Returns

          |VectorArray| of the adjoint operator evaluations.
              


   .. method:: apply_inverse(self, V, mu=None, initial_guess=None, least_squares=False)

      Apply the inverse operator.

      .. admonition:: Parameters

          V
              |VectorArray| of vectors to which the inverse operator is applied.
          mu
              The |parameter values| for which to evaluate the inverse operator.
          initial_guess
              |VectorArray| with the same length as `V` containing initial guesses
              for the solution.  Some implementations of `apply_inverse` may
              ignore this parameter.  If `None` a solver-dependent default is used.
          least_squares
              If `True`, solve the least squares problem::
              
                  u = argmin ||op(u) - v||_2.
              
              Since for an invertible operator the least squares solution agrees
              with the result of the application of the inverse operator,
              setting this option should, in general, have no effect on the result
              for those operators. However, note that when no appropriate
              |solver_options| are set for the operator, most implementations
              will choose a least squares solver by default which may be
              undesirable.
              
      .. admonition:: Returns

          |VectorArray| of the inverse operator evaluations.
              
      .. admonition:: Raises

          InversionError
              The operator could not be inverted.
              


   .. method:: apply_inverse_adjoint(self, U, mu=None, initial_guess=None, least_squares=False)

      Apply the inverse adjoint operator.

      .. admonition:: Parameters

          U
              |VectorArray| of vectors to which the inverse adjoint operator is applied.
          mu
              The |parameter values| for which to evaluate the inverse adjoint operator.
          initial_guess
              |VectorArray| with the same length as `U` containing initial guesses
              for the solution.  Some implementations of `apply_inverse_adjoint` may
              ignore this parameter.  If `None` a solver-dependent default is used.
          least_squares
              If `True`, solve the least squares problem::
              
                  v = argmin ||op^*(v) - u||_2.
              
              Since for an invertible operator the least squares solution agrees
              with the result of the application of the inverse operator,
              setting this option should, in general, have no effect on the result
              for those operators. However, note that when no appropriate
              |solver_options| are set for the operator, most operator
              implementations will choose a least squares solver by default which
              may be undesirable.
              
      .. admonition:: Returns

          |VectorArray| of the inverse adjoint operator evaluations.
              
      .. admonition:: Raises

          InversionError
              The operator could not be inverted.
              


   .. method:: assemble(self, mu=None)

      Assemble the operator for given |parameter values|.

      The result of the method strongly depends on the given operator.
      For instance, a matrix-based operator will assemble its matrix, a |LincombOperator|
      will try to form the linear combination of its operators, whereas an arbitrary
      operator might simply return a
      :class:`~pymor.operators.constructions.FixedParameterOperator`.
      The only assured property of the assembled operator is that it no longer
      depends on a |Parameter|.

      .. admonition:: Parameters

          mu
              The |parameter values| for which to assemble the operator.
              
      .. admonition:: Returns

          Parameter-independent, assembled |Operator|.
              



