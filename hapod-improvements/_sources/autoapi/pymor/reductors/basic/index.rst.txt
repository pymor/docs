:mod:`pymor.reductors.basic`
============================

.. py:module:: pymor.reductors.basic


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.reductors.basic.ProjectionBasedReductor
   pymor.reductors.basic.StationaryRBReductor
   pymor.reductors.basic.InstationaryRBReductor
   pymor.reductors.basic.LTIPGReductor
   pymor.reductors.basic.SOLTIPGReductor
   pymor.reductors.basic.DelayLTIPGReductor



Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.reductors.basic.extend_basis



.. class:: ProjectionBasedReductor(fom, bases, products={}, check_orthonormality=True, check_tol=0.001)


   Bases: :py:obj:`pymor.core.base.BasicObject`

   Generic projection based reductor.

   .. admonition:: Parameters

       fom
           The full order |Model| to reduce.
       bases
           A dict of |VectorArrays| of basis vectors.
       products
           A dict of inner product |Operators| w.r.t. which the corresponding bases are
           orthonormalized. A value of `None` corresponds to orthonormalization of the
           basis w.r.t. the Euclidean inner product.
       check_orthonormality
           If `True`, check if bases which have a corresponding entry in the `products`
           dict are orthonormal w.r.t. the given inner product. After each
           :meth:`basis extension <extend_basis>`, orthonormality is checked again.
       check_tol
           If `check_orthonormality` is `True`, the numerical tolerance with which the checks
           are performed.
           

   .. method:: reduce(self, dims=None)


   .. method:: _reduce(self)


   .. method:: _reduce_to_subbasis(self, dims)


   .. method:: project_operators(self)
      :abstractmethod:


   .. method:: assemble_error_estimator(self)


   .. method:: build_rom(self, projected_operators, error_estimator)
      :abstractmethod:


   .. method:: project_operators_to_subbasis(self, dims)
      :abstractmethod:


   .. method:: assemble_error_estimator_for_subbasis(self, dims)


   .. method:: reconstruct(self, u, basis='RB')

      Reconstruct high-dimensional vector from reduced vector `u`.


   .. method:: extend_basis(self, U, basis='RB', method='gram_schmidt', pod_modes=1, pod_orthonormalize=True, copy_U=True)


   .. method:: _check_orthonormality(self, basis, offset=0)



.. class:: StationaryRBReductor(fom, RB=None, product=None, check_orthonormality=None, check_tol=None)


   Bases: :py:obj:`ProjectionBasedReductor`

   Galerkin projection of a |StationaryModel|.

   .. admonition:: Parameters

       fom
           The full order |Model| to reduce.
       RB
           The basis of the reduced space onto which to project. If `None` an empty basis is used.
       product
           Inner product |Operator| w.r.t. which `RB` is orthonormalized. If `None`, the Euclidean
           inner product is used.
       check_orthonormality
           See :class:`ProjectionBasedReductor`.
       check_tol
           See :class:`ProjectionBasedReductor`.
           

   .. method:: project_operators(self)


   .. method:: project_operators_to_subbasis(self, dims)


   .. method:: build_rom(self, projected_operators, error_estimator)



.. class:: InstationaryRBReductor(fom, RB=None, product=None, initial_data_product=None, product_is_mass=False, check_orthonormality=None, check_tol=None)


   Bases: :py:obj:`ProjectionBasedReductor`

   Galerkin projection of an |InstationaryModel|.

   .. admonition:: Parameters

       fom
           The full order |Model| to reduce.
       RB
           The basis of the reduced space onto which to project. If `None` an empty basis is used.
       product
           Inner product |Operator| w.r.t. which `RB` is orthonormalized. If `None`, the
           the Euclidean inner product is used.
       initial_data_product
           Inner product |Operator| w.r.t. which the `initial_data` of `fom` is orthogonally projected.
           If `None`, the Euclidean inner product is used.
       product_is_mass
           If `True`, no mass matrix for the reduced |Model| is assembled.  Set to `True` if `RB` is
           orthonormal w.r.t. the `mass` matrix of `fom`.
       check_orthonormality
           See :class:`ProjectionBasedReductor`.
       check_tol
           See :class:`ProjectionBasedReductor`.
           

   .. method:: project_operators(self)


   .. method:: project_operators_to_subbasis(self, dims)


   .. method:: build_rom(self, projected_operators, error_estimator)



.. class:: LTIPGReductor(fom, W, V, E_biorthonormal=False)


   Bases: :py:obj:`ProjectionBasedReductor`

   Petrov-Galerkin projection of an |LTIModel|.

   .. admonition:: Parameters

       fom
           The full order |Model| to reduce.
       W
           The basis of the test space.
       V
           The basis of the ansatz space.
       E_biorthonormal
           If `True`, no `E` matrix will be assembled for the reduced |Model|.
           Set to `True` if `W` and `V` are biorthonormal w.r.t. `fom.E`.
           

   .. method:: project_operators(self)


   .. method:: project_operators_to_subbasis(self, dims)


   .. method:: build_rom(self, projected_operators, error_estimator)


   .. method:: extend_basis(self, **kwargs)
      :abstractmethod:


   .. method:: reconstruct(self, u, basis='V')

      Reconstruct high-dimensional vector from reduced vector `u`.



.. class:: SOLTIPGReductor(fom, W, V, M_biorthonormal=False)


   Bases: :py:obj:`ProjectionBasedReductor`

   Petrov-Galerkin projection of an |SecondOrderModel|.

   .. admonition:: Parameters

       fom
           The full order |Model| to reduce.
       W
           The basis of the test space.
       V
           The basis of the ansatz space.
       E_biorthonormal
           If `True`, no `E` matrix will be assembled for the reduced |Model|.
           Set to `True` if `W` and `V` are biorthonormal w.r.t. `fom.E`.
           

   .. method:: project_operators(self)


   .. method:: project_operators_to_subbasis(self, dims)


   .. method:: build_rom(self, projected_operators, error_estimator)


   .. method:: extend_basis(self, **kwargs)
      :abstractmethod:


   .. method:: reconstruct(self, u, basis='V')

      Reconstruct high-dimensional vector from reduced vector `u`.



.. class:: DelayLTIPGReductor(fom, W, V, E_biorthonormal=False)


   Bases: :py:obj:`ProjectionBasedReductor`

   Petrov-Galerkin projection of an |LinearDelayModel|.

   .. admonition:: Parameters

       fom
           The full order |Model| to reduce.
       W
           The basis of the test space.
       V
           The basis of the ansatz space.
       E_biorthonormal
           If `True`, no `E` matrix will be assembled for the reduced |Model|.
           Set to `True` if `W` and `V` are biorthonormal w.r.t. `fom.E`.
           

   .. method:: project_operators(self)


   .. method:: project_operators_to_subbasis(self, dims)


   .. method:: build_rom(self, projected_operators, error_estimator)


   .. method:: extend_basis(self, **kwargs)
      :abstractmethod:


   .. method:: reconstruct(self, u, basis='V')

      Reconstruct high-dimensional vector from reduced vector `u`.



.. function:: extend_basis(U, basis, product=None, method='gram_schmidt', pod_modes=1, pod_orthonormalize=True, copy_U=True)


