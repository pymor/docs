:mod:`pymor.algorithms.rules`
=============================

.. py:module:: pymor.algorithms.rules


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.algorithms.rules.rule
   pymor.algorithms.rules.match_class_base
   pymor.algorithms.rules.match_class
   pymor.algorithms.rules.match_class_all
   pymor.algorithms.rules.match_class_any
   pymor.algorithms.rules.match_always
   pymor.algorithms.rules.match_generic
   pymor.algorithms.rules.RuleTableMeta
   pymor.algorithms.rules.RuleTable



Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.algorithms.rules.print_children
   pymor.algorithms.rules.format_rules
   pymor.algorithms.rules.print_rules



.. class:: rule

   Decorator to make a method a rule in a given |RuleTable|.

   The decorated function will become the :attr:`action` to
   perform in case the rule :meth:`matches`.
   Matching conditions are specified by subclassing and
   overriding the :meth:`matches` method.

   If an action is decorated by multiple rules, all these rules
   must match for the action to apply.

   .. attribute:: action

      Method to call in case the rule matches.
      

   .. attribute:: condition_description
      

      

   .. attribute:: condition_type
      

      

   .. method:: __call__(self, action)


   .. method:: _matches(self, obj)
      :abstractmethod:

      Returns True if given object matches the condition.


   .. method:: matches(self, obj)

      Returns True if given object matches the condition.


   .. method:: _ipython_display_(self)


   .. method:: __repr__(self)

      Return repr(self).


   .. method:: action_description(self)
      :property:


   .. method:: source(self)
      :property:



.. class:: match_class_base(*classes)


   Bases: :py:obj:`rule`

   Decorator to make a method a rule in a given |RuleTable|.

   The decorated function will become the :attr:`action` to
   perform in case the rule :meth:`matches`.
   Matching conditions are specified by subclassing and
   overriding the :meth:`matches` method.

   If an action is decorated by multiple rules, all these rules
   must match for the action to apply.

   .. attribute:: action

      Method to call in case the rule matches.
      


.. class:: match_class(*classes)


   Bases: :py:obj:`match_class_base`

   |rule| that matches when obj is instance of one of the given classes.

   .. attribute:: condition_type
      :annotation: = CLASS

      

   .. method:: _matches(self, obj)

      Returns True if given object matches the condition.



.. class:: match_class_all(*classes)


   Bases: :py:obj:`match_class_base`

   |rule| that matches when each item of obj is instance of one of the given classes.

   .. attribute:: condition_type
      :annotation: = ALLCLASSES

      

   .. method:: _matches(self, obj)

      Returns True if given object matches the condition.



.. class:: match_class_any(*classes)


   Bases: :py:obj:`match_class_base`

   |rule| that matches when any item of obj is instance of one of the given classes.

   .. attribute:: condition_type
      :annotation: = ANYCLASS

      

   .. method:: _matches(self, obj)

      Returns True if given object matches the condition.



.. class:: match_always(action)


   Bases: :py:obj:`rule`

   |rule| that always matches.

   .. attribute:: condition_type
      :annotation: = ALWAYS

      

   .. method:: _matches(self, obj)

      Returns True if given object matches the condition.



.. class:: match_generic(condition, condition_description=None)


   Bases: :py:obj:`rule`

   |rule| with matching condition given by an arbitrary function.

   .. admonition:: Parameters

       condition
           Function of one argument which checks if given object
           matches condition.
       condition_description
           Optional string describing the condition implemented by
           `condition`.
           

   .. attribute:: condition_type
      :annotation: = GENERIC

      

   .. method:: _matches(self, obj)

      Returns True if given object matches the condition.



.. class:: RuleTableMeta(cls, name, bases, namespace)


   Bases: :py:obj:`pymor.core.base.UberMeta`

   Meta class for |RuleTable|.

   .. attribute:: __str__
      

      

   .. method:: __repr__(cls)

      Return repr(self).


   .. method:: __getitem__(cls, idx)



.. class:: RuleTable(use_caching=False)


   Bases: :py:obj:`pymor.core.base.BasicObject`

   Define algorithm by a table of match conditions and corresponding actions.

   |RuleTable| manages a table of |rules|, stored in the `rules`
   attributes, which can be :meth:`applied <apply>` to given
   objects.

   A new table is created by subclassing |RuleTable| and defining
   new methods which are decorated with :class:`match_class`,
   :class:`match_generic` or another :class:`rule` subclass.
   The order of the method definitions determines the order in
   which the defined |rules| are applied.

   .. admonition:: Parameters

       use_caching
           If `True`, cache results of :meth:`apply`.
           
   .. attribute:: rules

      `list` of all defined |rules|.
      

   .. method:: insert_rule(cls, index, rule_)


   .. method:: append_rule(cls, rule_)


   .. method:: breakpoint_for_obj(cls, obj)
      :classmethod:

      Add a conditional breakpoint for given object.

      Break execution in :meth:`~RuleTable.apply`, when being applied
      to a certain object.

      .. admonition:: Parameters

          obj
              Object for which to add the conditional breakpoint.
              


   .. method:: breakpoint_for_name(cls, name)
      :classmethod:

      Add a conditional breakpoint for objects of given name.

      Break execution in :meth:`~RuleTable.apply`, when being applied
      to an object with a certain name.

      .. admonition:: Parameters

          name
              :attr:`~pymor.core.base.BasicObject.name` of the object for which
              to add the conditional breakpoint.
              


   .. method:: apply(self, obj)

      Sequentially apply rules to given object.

      This method iterates over all rules of the given |RuleTable|.
      For each |rule|, it is checked if it :meth:`~rule.matches` the given
      object. If `False`, the next |rule| in the table is considered.
      If `True` the corresponding :attr:`~rule.action` is executed with
      `obj` as parameter. If execution of :attr:`~action` raises
      :class:`~pymor.core.exceptions.RuleNotMatchingError`, the rule is
      considered as not matching, and execution continues with evaluation
      of the next rule. Otherwise, execution is stopped and the return value
      of :attr:`rule.action` is returned to the caller.

      If no |rule| matches, a :class:`~pymor.core.exceptions.NoMatchingRuleError`
      is raised.

      .. admonition:: Parameters

          obj
              The object to apply the |RuleTable| to.
              
      .. admonition:: Returns

          Return value of the action of the first matching |rule| in the table.
              
      .. admonition:: Raises

          NoMatchingRuleError
              No |rule| could be applied to the given object.
              


   .. method:: apply_children(self, obj, children=None)

      Apply rules to all children of the given object.

      This method calls :meth:`apply` to each child of
      the given object. The children of the object are either provided
      by the `children` parameter or automatically inferred by the
      :meth:`get_children` method.

      .. admonition:: Parameters

          obj
              The object to apply the |RuleTable| to.
          children
              `None` or a list of attribute names defining the children
              to consider.
              
      .. admonition:: Returns

          Result of : meth:`apply` for all given children.
              


   .. method:: replace_children(self, obj, children=None)

      Replace children of object according to rule table.

      Same as :meth:`apply_children`, but additionally calls
      `obj.with_` to replace the children of `obj` with the
      result of the corresponding :meth:`apply` call.


   .. method:: get_children(cls, obj)
      :classmethod:

      Determine children of given object.

      This method returns a list of the names of all
      attributes `a`, for which one of the folling is true:

          1. `a` is an |Operator|.
          2. `a` is a `mapping` and each of its values is either an |Operator| or `None`.
          3. `a` is an `iterable` and each of its elements is either an |Operator| or `None`.


   .. method:: __repr__(self)

      Return repr(self).



.. function:: print_children(obj)


.. function:: format_rules(rules)


.. function:: print_rules(rules)


