:mod:`pymor.algorithms.riccati`
===============================

.. py:module:: pymor.algorithms.riccati


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.algorithms.riccati.solve_ricc_lrcf
   pymor.algorithms.riccati.solve_pos_ricc_lrcf
   pymor.algorithms.riccati._solve_ricc_check_args



Attributes
~~~~~~~~~~

.. autoapisummary::

   pymor.algorithms.riccati._DEFAULT_RICC_LRCF_SPARSE_SOLVER_BACKEND
   pymor.algorithms.riccati._DEFAULT_RICC_LRCF_DENSE_SOLVER_BACKEND
   pymor.algorithms.riccati._DEFAULT_POS_RICC_LRCF_DENSE_SOLVER_BACKEND


.. data:: _DEFAULT_RICC_LRCF_SPARSE_SOLVER_BACKEND
   

   

.. data:: _DEFAULT_RICC_LRCF_DENSE_SOLVER_BACKEND
   

   

.. function:: solve_ricc_lrcf(A, E, B, C, R=None, trans=False, options=None, default_sparse_solver_backend=_DEFAULT_RICC_LRCF_SPARSE_SOLVER_BACKEND, default_dense_solver_backend=_DEFAULT_RICC_LRCF_DENSE_SOLVER_BACKEND)

   Compute an approximate low-rank solution of a Riccati equation.

   Returns a low-rank Cholesky factor :math:`Z` such that :math:`Z Z^T`
   approximates the solution :math:`X` of a (generalized)
   continuous-time algebraic Riccati equation:

   - if trans is `False`

     .. math::
         A X E^T + E X A^T
         - E X C^T R^{-1} C X E^T
         + B B^T = 0.

   - if trans is `True`

     .. math::
         A^T X E + E^T X A
         - E^T X B R^{-1} B^T X E
         + C^T C = 0.

   If E is None, it is taken to be identity, and similarly for R.

   We assume:

   - A and E are real |Operators|,
   - B and C are real |VectorArrays| from `A.source`,
   - R is a real |NumPy array|,
   - (E, A, B, C) is stabilizable and detectable, and
   - R is symmetric positive definite.

   For large-scale problems, we additionally assume that `len(B)` and
   `len(C)` are small.

   If the solver is not specified using the options argument, a solver
   backend is chosen based on availability in the following order:

   - for sparse problems (minimum size specified by
     :func:`~pymor.algorithms.lyapunov.mat_eqn_sparse_min_size`)

     1. `pymess` (see :func:`pymor.bindings.pymess.solve_ricc_lrcf`),
     2. `lrradi` (see :func:`pymor.algorithms.lrradi.solve_ricc_lrcf`),

   - for dense problems (smaller than
     :func:`~pymor.algorithms.lyapunov.mat_eqn_sparse_min_size`)

     1. `pymess` (see :func:`pymor.bindings.pymess.solve_ricc_lrcf`),
     2. `slycot` (see :func:`pymor.bindings.slycot.solve_ricc_lrcf`),
     3. `scipy` (see :func:`pymor.bindings.scipy.solve_ricc_lrcf`).

   .. admonition:: Parameters

       A
           The non-parametric |Operator| A.
       E
           The non-parametric |Operator| E or `None`.
       B
           The operator B as a |VectorArray| from `A.source`.
       C
           The operator C as a |VectorArray| from `A.source`.
       R
           The operator R as a 2D |NumPy array| or `None`.
       trans
           Whether the first |Operator| in the Riccati equation is
           transposed.
       options
           The solver options to use.
           See:
           
           - :func:`pymor.bindings.scipy.ricc_lrcf_solver_options`,
           - :func:`pymor.bindings.slycot.ricc_lrcf_solver_options`,
           - :func:`pymor.bindings.pymess.ricc_lrcf_solver_options`.
           - :func:`pymor.algorithms.lrradi.ricc_lrcf_solver_options`.
           
       default_sparse_solver_backend
           Default sparse solver backend to use (pymess, lrradi).
       default_dense_solver_backend
           Default dense solver backend to use (pymess, slycot, scipy).
           
   .. admonition:: Returns

       Z
           Low-rank Cholesky factor of the Riccati equation solution,
           |VectorArray| from `A.source`.
           


.. data:: _DEFAULT_POS_RICC_LRCF_DENSE_SOLVER_BACKEND
   

   

.. function:: solve_pos_ricc_lrcf(A, E, B, C, R=None, trans=False, options=None, default_dense_solver_backend=_DEFAULT_RICC_LRCF_DENSE_SOLVER_BACKEND)

   Compute an approximate low-rank solution of a positive Riccati equation.

   Returns a low-rank Cholesky factor :math:`Z` such that :math:`Z Z^T`
   approximates the solution :math:`X` of a (generalized) positive
   continuous-time algebraic Riccati equation:

   - if trans is `False`

     .. math::
         A X E^T + E X A^T
         + E X C^T R^{-1} C X E^T
         + B B^T = 0.

   - if trans is `True`

     .. math::
         A^T X E + E^T X A
         + E^T X B R^{-1} B^T X E
         + C^T C = 0.

   If E is None, it is taken to be identity, and similarly for R.

   If the solver is not specified using the options argument, a solver
   backend is chosen based on availability in the following order:

   1. `pymess` (see :func:`pymor.bindings.pymess.solve_pos_ricc_lrcf`),
   2. `slycot` (see :func:`pymor.bindings.slycot.solve_pos_ricc_lrcf`),
   3. `scipy` (see :func:`pymor.bindings.scipy.solve_pos_ricc_lrcf`).

   .. admonition:: Parameters

       A
           The non-parametric |Operator| A.
       E
           The non-parametric |Operator| E or `None`.
       B
           The operator B as a |VectorArray| from `A.source`.
       C
           The operator C as a |VectorArray| from `A.source`.
       R
           The operator R as a 2D |NumPy array| or `None`.
       trans
           Whether the first |Operator| in the positive Riccati equation is
           transposed.
       options
           The solver options to use.
           See:
           
           - :func:`pymor.bindings.scipy.pos_ricc_lrcf_solver_options`,
           - :func:`pymor.bindings.slycot.pos_ricc_lrcf_solver_options`,
           - :func:`pymor.bindings.pymess.pos_ricc_lrcf_solver_options`.
           
       default_dense_solver_backend
           Default dense solver backend to use (pymess, slycot, scipy).
           
   .. admonition:: Returns

       Z
           Low-rank Cholesky factor of the positive Riccati equation
           solution, |VectorArray| from `A.source`.
           


.. function:: _solve_ricc_check_args(A, E, B, C, R, trans)


