:mod:`pymor.algorithms.ei`
==========================

.. py:module:: pymor.algorithms.ei

.. autoapi-nested-parse::

   This module contains algorithms for the empirical interpolation of |Operators|.

   The main work for generating the necessary interpolation data is handled by
   the :func:`ei_greedy` method. The objects returned by this method can be used
   to instantiate an |EmpiricalInterpolatedOperator|.

   As a convenience, the :func:`interpolate_operators` method allows to perform
   the empirical interpolation of the |Operators| of a given model with
   a single function call.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.algorithms.ei.ei_greedy
   pymor.algorithms.ei.deim
   pymor.algorithms.ei.interpolate_operators
   pymor.algorithms.ei._interpolate_operators_build_evaluations
   pymor.algorithms.ei._parallel_ei_greedy
   pymor.algorithms.ei._parallel_ei_greedy_get_empty
   pymor.algorithms.ei._parallel_ei_greedy_initialize
   pymor.algorithms.ei._parallel_ei_greedy_get_vector
   pymor.algorithms.ei._parallel_ei_greedy_update
   pymor.algorithms.ei._identity



.. function:: ei_greedy(U, error_norm=None, atol=None, rtol=None, max_interpolation_dofs=None, copy=True, pool=dummy_pool)

   Generate data for empirical interpolation using EI-Greedy algorithm.

   Given a |VectorArray| `U`, this method generates a collateral basis and
   interpolation DOFs for empirical interpolation of the vectors contained in `U`.
   The returned objects can be used to instantiate an |EmpiricalInterpolatedOperator|
   (with `triangular=True`).

   The interpolation data is generated by a greedy search algorithm, where in each
   loop iteration the worst approximated vector in `U` is added to the collateral basis.

   .. admonition:: Parameters

       U
           A |VectorArray| of vectors to interpolate.
       error_norm
           Norm w.r.t. which to calculate the interpolation error. If `None`, the Euclidean norm
           is used.
       atol
           Stop the greedy search if the largest approximation error is below this threshold.
       rtol
           Stop the greedy search if the largest relative approximation error is below this threshold.
       max_interpolation_dofs
           Stop the greedy search if the number of interpolation DOF (= dimension of the collateral
           basis) reaches this value.
       copy
           If `False`, `U` will be modified during executing of the algorithm.
       pool
           If not `None`, the |WorkerPool| to use for parallelization.
           
   .. admonition:: Returns

       interpolation_dofs
           |NumPy array| of the DOFs at which the vectors are evaluated.
       collateral_basis
           |VectorArray| containing the generated collateral basis.
       data
           Dict containing the following fields:
           
               :errors:                Sequence of maximum approximation errors during
                                       greedy search.
               :triangularity_errors:  Sequence of maximum absolute values of interoplation
                                       matrix coefficients in the upper triangle (should
                                       be near zero).
           


.. function:: deim(U, modes=None, pod=True, atol=None, rtol=None, product=None, pod_options={})

   Generate data for empirical interpolation using DEIM algorithm.

   Given a |VectorArray| `U`, this method generates a collateral basis and
   interpolation DOFs for empirical interpolation of the vectors contained in `U`.
   The returned objects can be used to instantiate an |EmpiricalInterpolatedOperator|
   (with `triangular=False`).

   The collateral basis is determined by the first :func:`~pymor.algorithms.pod.pod` modes of `U`.

   .. admonition:: Parameters

       U
           A |VectorArray| of vectors to interpolate.
       modes
           Dimension of the collateral basis i.e. number of POD modes of the vectors in `U`.
       pod
           If `True`, perform a POD of `U` to obtain the collateral basis. If `False`, `U`
           is used as collateral basis.
       atol
           Absolute POD tolerance.
       rtol
           Relative POD tolerance.
       product
           Inner product |Operator| used for the POD.
       pod_options
           Dictionary of additional options to pass to the :func:`~pymor.algorithms.pod.pod` algorithm.
           
   .. admonition:: Returns

       interpolation_dofs
           |NumPy array| of the DOFs at which the vectors are interpolated.
       collateral_basis
           |VectorArray| containing the generated collateral basis.
       data
           Dict containing the following fields:
           
               :svals: POD singular values.
           


.. function:: interpolate_operators(fom, operator_names, parameter_sample, error_norm=None, product=None, atol=None, rtol=None, max_interpolation_dofs=None, pod_options={}, alg='ei_greedy', pool=dummy_pool)

   Empirical operator interpolation using the EI-Greedy/DEIM algorithm.

   This is a convenience method to facilitate the use of :func:`ei_greedy` or :func:`deim`.
   Given a |Model|, names of |Operators|, and a sample of |Parameters|, first
   the operators are evaluated on the solution snapshots of the model for the
   provided parameters. These evaluations are then used as input for
   :func:`ei_greedy`/:func:`deim`.  Finally the resulting interpolation data is used to
   create |EmpiricalInterpolatedOperators| and a new model with the interpolated
   operators is returned.

   Note that this implementation creates *one* common collateral basis for all specified
   operators, which might not be what you want.

   .. admonition:: Parameters

       fom
           The |Model| whose |Operators| will be interpolated.
       operator_names
           List of keys in the `operators` dict of the model. The corresponding
           |Operators| will be interpolated.
       parameter_sample
           A list of |Parameters| for which solution snapshots are calculated.
       error_norm
           See :func:`ei_greedy`.
           Has no effect if `alg == 'deim'`.
       product
           Inner product for POD computation in :func:`deim`.
           Has no effect if `alg == 'ei_greedy'`.
       atol
           See :func:`ei_greedy`.
       rtol
           See :func:`ei_greedy`.
       max_interpolation_dofs
           See :func:`ei_greedy`.
       pod_options
           Further options for :func:`~pymor.algorithms.pod.pod` algorithm.
           Has no effect if `alg == 'ei_greedy'`.
       alg
           Either `ei_greedy` or `deim`.
       pool
           If not `None`, the |WorkerPool| to use for parallelization.
           
   .. admonition:: Returns

       eim
           |Model| with |Operators| given by `operator_names` replaced by
           |EmpiricalInterpolatedOperators|.
       data
           Dict containing the following fields:
           
               :dofs:     |NumPy array| of the DOFs at which the |Operators| have to be evaluated.
               :basis:    |VectorArray| containing the generated collateral basis.
           
           In addition, `data` contains the fields of the `data` `dict` returned by
           :func:`ei_greedy`/:func:`deim`.
           


.. function:: _interpolate_operators_build_evaluations(mu, fom=None, operators=None, evaluations=None)


.. function:: _parallel_ei_greedy(U, pool, error_norm=None, atol=None, rtol=None, max_interpolation_dofs=None, copy=True)


.. function:: _parallel_ei_greedy_get_empty(U=None)


.. function:: _parallel_ei_greedy_initialize(U=None, error_norm=None, copy=None, data=None)


.. function:: _parallel_ei_greedy_get_vector(data=None)


.. function:: _parallel_ei_greedy_update(new_vec=None, new_dof=None, data=None)


.. function:: _identity(x)


