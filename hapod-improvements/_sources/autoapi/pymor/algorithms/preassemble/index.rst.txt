:mod:`pymor.algorithms.preassemble`
===================================

.. py:module:: pymor.algorithms.preassemble


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.algorithms.preassemble.PreAssembleRules



Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.algorithms.preassemble.preassemble



.. function:: preassemble(obj)

   Preassemble non-parametric operators.

   If `obj` is a non-parametric |Operator|, return
   `obj.assemble()` otherwise return `obj`. Recursively
   replaces children of `obj`.


.. class:: PreAssembleRules


   Bases: :py:obj:`pymor.algorithms.rules.RuleTable`

   Define algorithm by a table of match conditions and corresponding actions.

   |RuleTable| manages a table of |rules|, stored in the `rules`
   attributes, which can be :meth:`applied <apply>` to given
   objects.

   A new table is created by subclassing |RuleTable| and defining
   new methods which are decorated with :class:`match_class`,
   :class:`match_generic` or another :class:`rule` subclass.
   The order of the method definitions determines the order in
   which the defined |rules| are applied.

   .. admonition:: Parameters

       use_caching
           If `True`, cache results of :meth:`apply`.
           
   .. attribute:: rules

      `list` of all defined |rules|.
      

   .. method:: action_recurse(self, op)


   .. method:: action_recurse_and_assemble(self, op)


   .. method:: action_AdjointOperator(self, op)


   .. method:: action_assemble(self, op)


   .. method:: action_identity(self, op)



