:mod:`pymor.algorithms.to_matrix`
=================================

.. py:module:: pymor.algorithms.to_matrix


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.algorithms.to_matrix.ToMatrixRules



Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.algorithms.to_matrix.to_matrix



.. function:: to_matrix(op, format=None, mu=None)

   Convert a linear |Operator| to a matrix.

   .. admonition:: Parameters

       op
           The |Operator| to convert.
       format
           Format of the resulting matrix: |NumPy array| if 'dense',
           otherwise the appropriate |SciPy spmatrix|.
           If `None`, a choice between dense and sparse format is
           automatically made.
       mu
           The |parameter values| for which to convert `op`.
           
   .. admonition:: Returns

       res
           The matrix equivalent to `op`.
           


.. class:: ToMatrixRules(format, mu)


   Bases: :py:obj:`pymor.algorithms.rules.RuleTable`

   Define algorithm by a table of match conditions and corresponding actions.

   |RuleTable| manages a table of |rules|, stored in the `rules`
   attributes, which can be :meth:`applied <apply>` to given
   objects.

   A new table is created by subclassing |RuleTable| and defining
   new methods which are decorated with :class:`match_class`,
   :class:`match_generic` or another :class:`rule` subclass.
   The order of the method definitions determines the order in
   which the defined |rules| are applied.

   .. admonition:: Parameters

       use_caching
           If `True`, cache results of :meth:`apply`.
           
   .. attribute:: rules

      `list` of all defined |rules|.
      

   .. method:: action_NumpyMatrixOperator(self, op)


   .. method:: action_BlockOperator(self, op)


   .. method:: action_AdjointOperator(self, op)


   .. method:: action_ComponentProjectionOperator(self, op)


   .. method:: action_ConcatenationOperator(self, op)


   .. method:: action_IdentityOperator(self, op)


   .. method:: action_LincombOperator(self, op)


   .. method:: action_LowRankOperator(self, op)


   .. method:: action_LowRankUpdatedOperator(self, op)


   .. method:: action_VectorArrayOperator(self, op)


   .. method:: action_ZeroOperator(self, op)



