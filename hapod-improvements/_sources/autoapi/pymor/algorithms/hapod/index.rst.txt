:mod:`pymor.algorithms.hapod`
=============================

.. py:module:: pymor.algorithms.hapod


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.algorithms.hapod.Tree
   pymor.algorithms.hapod.IncHAPODTree
   pymor.algorithms.hapod.DistHAPODTree
   pymor.algorithms.hapod.LifoExecutor
   pymor.algorithms.hapod.FakeExecutor



Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.algorithms.hapod.default_pod_method
   pymor.algorithms.hapod.hapod
   pymor.algorithms.hapod.inc_hapod
   pymor.algorithms.hapod.dist_hapod
   pymor.algorithms.hapod.inc_vectorarray_hapod
   pymor.algorithms.hapod.dist_vectorarray_hapod
   pymor.algorithms.hapod.std_local_eps



.. class:: Tree

   Bases: :py:obj:`pymor.core.base.BasicObject`

   A rooted tree.

   .. attribute:: root
      :annotation: = 0

      

   .. method:: children(self, node)
      :abstractmethod:


   .. method:: depth(self)
      :property:


   .. method:: is_leaf(self, node)



.. class:: IncHAPODTree(steps)


   Bases: :py:obj:`Tree`

   A rooted tree.

   .. method:: children(self, node)



.. class:: DistHAPODTree(slices)


   Bases: :py:obj:`Tree`

   A rooted tree.

   .. method:: children(self, node)



.. function:: default_pod_method(U, eps, is_root_node, product)


.. function:: hapod(tree, snapshots, local_eps, product=None, pod_method=default_pod_method, executor=None, eval_snapshots_in_executor=False)

   Compute the Hierarchical Approximate POD.

   This is an implementation of the HAPOD algorithm from :cite:`HLR18`.

   The HAPOD tree is traversed concurrently, ensuring that for each
   for each node `n` the leaf children of `n` are visited only after
   all non-leaf children of `n` have been handled. In particular for
   incremental POD computation this property is used to ensure that
   the input data is requested in correct order.

   .. admonition:: Parameters

       tree
           A :class:`Tree` defining the worker topology.
       snapshots
           A mapping `snapshots(node)` returning for each leaf node the
           associated snapshot vectors.
       local_eps
           A mapping `local_eps(node, snap_count, num_vecs)` assigning
           to each tree node `node` an l2 truncation error tolerance for the
           local pod based on the number of input vectors `num_vecs` and the
           total number of snapshot vectors below the given node `snap_count`.
       product
           Inner product |Operator| w.r.t. which to compute the POD.
       pod_method
           A function `pod_method(U, eps, root_node, product)` for computing
           the POD of the |VectorArray| `U` w.r.t. the given inner product
           `product` and the l2 error tolerance `eps`. `root_node` is set to
           `True` when the POD is computed at the root of the tree.
       executor
           If not `None`, a :class:`concurrent.futures.Executor` object to use
           for parallelization.
       eval_snapshots_in_executor
           If `True` also parallelize the evaluation of the snapshot map.
           
   .. admonition:: Returns

       modes
           The computed POD modes.
       svals
           The associated singular values.
       snap_count
           The total number of input snapshot vectors.
           


.. function:: inc_hapod(steps, snapshots, eps, omega, product=None)

   Incremental Hierarchical Approximate POD.

   This computes the incremental HAPOD from :cite:`HLR18`.

   .. admonition:: Parameters

       steps
           The number of incremental POD updates. Has to agree with the lenght
           of `snapshots`.
       snapshots
           An iterable returning for each incremental POD step the associated
           snapshot vectors.
       eps
           Desired l2-mean approximation error.
       omega
           Tuning parameter (0 < omega < 1) to balance performance with
           approximation quality.
       product
           Inner product |Operator| w.r.t. which to compute the POD.
           
   .. admonition:: Returns

       modes
           The computed POD modes.
       svals
           The associated singular values.
       snap_count
           The total number of input snapshot vectors.
           


.. function:: dist_hapod(num_slices, snapshots, eps, omega, product=None, executor=None, eval_snapshots_in_executor=False)

   Distributed Hierarchical Approximate POD.

   This computes the distributed HAPOD from :cite:`HLR18`.

   .. admonition:: Parameters

       num_slices
           The number of snapshot vector slices.
       snapshots
           A mapping `snapshots(slice)` returning for each slice number
           the associated snapshot vectors.
       eps
           Desired l2-mean approximation error.
       omega
           Tuning parameter (0 < omega < 1) to balance performance with
           approximation quality.
       product
           Inner product |Operator| w.r.t. which to compute the POD.
       executor
           If not `None`, a :class:`concurrent.futures.Executor` object to use
           for parallelization.
       eval_snapshots_in_executor
           If `True` also parallelize the evaluation of the snapshot map.
           
   .. admonition:: Returns

       modes
           The computed POD modes.
       svals
           The associated singular values.
       snap_count
           The total number of input snapshot vectors.
           


.. function:: inc_vectorarray_hapod(steps, U, eps, omega, product=None)

   Incremental Hierarchical Approximate POD.

   This computes the incremental HAPOD from :cite:`HLR18` for a given |VectorArray|.

   .. admonition:: Parameters

       steps
           The number of incremental POD updates.
       U
           The |VectorArray| of which to compute the HAPOD.
       eps
           Desired l2-mean approximation error.
       omega
           Tuning parameter (0 < omega < 1) to balance performance with
           approximation quality.
       product
           Inner product |Operator| w.r.t. which to compute the POD.
           
   .. admonition:: Returns

       modes
           The computed POD modes.
       svals
           The associated singular values.
       snap_count
           The total number of input snapshot vectors.
           


.. function:: dist_vectorarray_hapod(num_slices, U, eps, omega, product=None, executor=None)

   Distributed Hierarchical Approximate POD.

   This computes the distributed HAPOD from :cite:`HLR18` of a given |VectorArray|.

   .. admonition:: Parameters

       num_slices
           The number of snapshot vector slices.
       U
           The |VectorArray| of which to compute the HAPOD.
       eps
           Desired l2-mean approximation error.
       omega
           Tuning parameter (0 < omega < 1) to balance performance with
           approximation quality.
       product
           Inner product |Operator| w.r.t. which to compute the POD.
       executor
           If not `None`, a :class:`concurrent.futures.Executor` object to use
           for parallelization.
           
   .. admonition:: Returns

       modes
           The computed POD modes.
       svals
           The associated singular values.
       snap_count
           The total number of input snapshot vectors.
           


.. function:: std_local_eps(tree, eps, omega, pod_on_leafs=True)


.. class:: LifoExecutor(executor, max_workers=None)


   .. method:: submit(self, f, *args)


   .. method:: run_task(self)
      :async:


   .. method:: done_callback(self, future, executor_future)



.. class:: FakeExecutor

   .. method:: submit(f, *args)
      :staticmethod:
      :async:



