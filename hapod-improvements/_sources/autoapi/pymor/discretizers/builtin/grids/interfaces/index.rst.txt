:mod:`pymor.discretizers.builtin.grids.interfaces`
==================================================

.. py:module:: pymor.discretizers.builtin.grids.interfaces


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.discretizers.builtin.grids.interfaces.ReferenceElement
   pymor.discretizers.builtin.grids.interfaces.Grid
   pymor.discretizers.builtin.grids.interfaces.GridWithOrthogonalCenters
   pymor.discretizers.builtin.grids.interfaces.BoundaryInfo




.. class:: ReferenceElement


   Bases: :py:obj:`pymor.core.cache.CacheableObject`

   Defines a reference element.

   All reference elements have the property that all subentities of a given codimension are of the
   same type. I.e. a three-dimensional reference element cannot have triangles and rectangles as
   faces at the same time.

   .. attribute:: dim

      The dimension of the reference element

   .. attribute:: volume

      The volume of the reference element
      

   .. attribute:: cache_region
      :annotation: = memory

      

   .. method:: size(self, codim)
      :abstractmethod:

      Number of subentities of codimension `codim`.


   .. method:: subentities(self, codim, subentity_codim)
      :abstractmethod:

      `subentities(c,sc)[i,j]` is, with respect to the indexing inside the
      reference element, the index of the `j`-th codim-`subentity_codim`
      subentity of the `i`-th codim-`codim` subentity of the reference element.


   .. method:: subentity_embedding(self, subentity_codim)
      :abstractmethod:

      Returns a tuple `(A, B)` which defines the embedding of the codim-`subentity_codim`
      subentities into the reference element.

      For `subentity_codim > 1', the embedding is by default given recursively via
      `subentity_embedding(subentity_codim - 1)` and
      `sub_reference_element(subentity_codim - 1).subentity_embedding(1)` choosing always
      the superentity with smallest index.


   .. method:: _subentity_embedding(self, subentity_codim)


   .. method:: sub_reference_element(self, codim)
      :abstractmethod:

      Returns the reference element of the codim-`codim` subentities.


   .. method:: _sub_reference_element(self, codim)


   .. method:: __call__(self, codim)

      Returns the reference element of the codim-`codim` subentities.


   .. method:: unit_outer_normals(self)
      :abstractmethod:

      `retval[e]` is the unit outer-normal vector to the codim-1 subentity
      with index `e`.


   .. method:: center(self)
      :abstractmethod:

      Coordinates of the barycenter.


   .. method:: mapped_diameter(self, A)
      :abstractmethod:

      The diameter of the reference element after transforming it with the
      matrix `A` (vectorized).


   .. method:: quadrature(self, order=None, npoints=None, quadrature_type='default')
      :abstractmethod:

      Returns tuple `(P, W)` where `P` is an array of quadrature points with
      corresponding weights `W`.

      The quadrature is of order `order` or has `npoints` integration points.


   .. method:: quadrature_info(self)
      :abstractmethod:

      Returns a tuple of dicts `(O, N)` where `O[quadrature_type]` is a list
      of orders which are implemented for `quadrature_type` and `N[quadrature_type]`
      is a list of the corresponding numbers of integration points.


   .. method:: quadrature_types(self)



.. class:: Grid


   Bases: :py:obj:`pymor.core.cache.CacheableObject`

   Topological grid with geometry where each codim-0 entity is affinely mapped to the same
   |ReferenceElement|.

   The grid is completely determined via the subentity relation given by :meth:`~Grid.subentities`
   and the embeddings given by :meth:`~Grid.embeddings`. In addition, only :meth:`~Grid.size` and
   :meth:`~Grid.reference_element` have to be implemented.

   .. attribute:: cache_region
      :annotation: = memory

      

   .. method:: size(self, codim)
      :abstractmethod:

      The number of entities of codimension `codim`.


   .. method:: subentities(self, codim, subentity_codim)
      :abstractmethod:

      `retval[e,s]` is the global index of the `s`-th codim-`subentity_codim` subentity of the
      codim-`codim` entity with global index `e`.

      The ordering of `subentities(0, subentity_codim)[e]` has to correspond, w.r.t. the embedding
      of `e`, to the local ordering inside the reference element.

      For `codim > 0`, we provide a default implementation by calculating the subentities of `e`
      as follows:

          1. Find the `codim-1` parent entity `e_0` of `e` with minimal global index
          2. Lookup the local indices of the subentities of `e` inside `e_0` using the reference
             element.
          3. Map these local indices to global indices using
             `subentities(codim - 1, subentity_codim)`.

      This procedures assures that `subentities(codim, subentity_codim)[e]` has the right ordering
      w.r.t. the embedding determined by `e_0`, which agrees with what is returned by
      `embeddings(codim)`


   .. method:: _subentities(self, codim, subentity_codim)


   .. method:: superentities(self, codim, superentity_codim)

      `retval[e,s]` is the global index of the `s`-th codim-`superentity_codim` superentity of
      the codim-`codim` entity with global index `e`.

      `retval[e]` is sorted by global index.

      The default implementation is to compute the result from
      `subentities(superentity_codim, codim)`.


   .. method:: _superentities(self, codim, superentity_codim)


   .. method:: superentity_indices(self, codim, superentity_codim)

      `retval[e,s]` is the local index of the codim-`codim` entity `e` in the
      codim-`superentity_codim` superentity `superentities(codim, superentity_codim)[e,s].`


   .. method:: _superentity_indices(self, codim, superentity_codim)


   .. method:: _superentities_with_indices(self, codim, superentity_codim)


   .. method:: neighbours(self, codim, neighbour_codim, intersection_codim=None)

      `retval[e,n]` is the global index of the `n`-th codim-`neighbour_codim` entitiy of the
      codim-`codim` entity `e` that shares with `e` a subentity of codimension
      `intersection_codim`.

      If `intersection_codim == None`, it is set to `codim + 1` if `codim == neighbour_codim` and
      to `min(codim, neighbour_codim)` otherwise.

      The default implementation is to compute the result from
      `subentities(codim, intersection_codim)` and
      `superentities(intersection_codim, neihbour_codim)`.


   .. method:: _neighbours(self, codim, neighbour_codim, intersection_codim)


   .. method:: boundary_mask(self, codim)

      `retval[e]` is true iff the codim-`codim` entity with global index `e` is a boundary
      entity.

      By definition, a codim-1 entity is a boundary entity if it has only one codim-0 superentity.
      For `codim != 1`, a codim-`codim` entity is a boundary entity if it has a codim-1
      sub/super-entity.


   .. method:: _boundary_mask(self, codim)


   .. method:: boundaries(self, codim)

      Returns the global indices of all codim-`codim` boundary entities.

      By definition, a codim-1 entity is a boundary entity if it has only one codim-0 superentity.
      For `codim != 1`, a codim-`codim` entity is a boundary entity if it has a codim-1
      sub/super-entity.


   .. method:: _boundaries(self, codim)


   .. method:: reference_element(self, codim)
      :abstractmethod:

      The |ReferenceElement| of the codim-`codim` entities.


   .. method:: embeddings(self, codim)
      :abstractmethod:

      Returns tuple `(A, B)` where `A[e]` and `B[e]` are the linear part and the translation
      part of the map from the reference element of `e` to `e`.

      For `codim > 0`, we provide a default implementation by taking the embedding of the codim-1
      parent entity `e_0` of `e` with lowest global index and composing it with the
      subentity_embedding of `e` into `e_0` determined by the reference element.


   .. method:: _embeddings(self, codim)


   .. method:: jacobian_inverse_transposed(self, codim)

      `retval[e]` is the transposed (pseudo-)inverse of
      the Jacobian of `embeddings(codim)[e]`.


   .. method:: _jacobian_inverse_transposed(self, codim)


   .. method:: integration_elements(self, codim)

      `retval[e]` is given as `sqrt(det(A^T*A))`, where `A = embeddings(codim)[0][e]`.


   .. method:: _integration_elements(self, codim)


   .. method:: volumes(self, codim)

      `retval[e]` is the (dim-`codim`)-dimensional volume of the codim-`codim` entity with
      global index `e`.


   .. method:: _volumes(self, codim)


   .. method:: volumes_inverse(self, codim)

      `retval[e] = 1 / volumes(codim)[e]`.


   .. method:: _volumes_inverse(self, codim)


   .. method:: unit_outer_normals(self)

      `retval[e,i]` is the unit outer normal to the i-th codim-1 subentity of the codim-0
      entitiy with global index `e`.


   .. method:: _unit_outer_normals(self)


   .. method:: centers(self, codim)

      `retval[e]` is the barycenter of the codim-`codim` entity with global index `e`.


   .. method:: _centers(self, codim)


   .. method:: diameters(self, codim)

      `retval[e]` is the diameter of the codim-`codim` entity with global index `e`.


   .. method:: _diameters(self, codim)


   .. method:: quadrature_points(self, codim, order=None, npoints=None, quadrature_type='default')

      `retval[e]` is an array of quadrature points in global coordinates for the codim-`codim`
      entity with global index `e`.

      The quadrature is of order `order` or has `npoints` integration points. To integrate a
      function `f` over `e` one has to form ::

          np.dot(f(quadrature_points(codim, order)[e]),
              reference_element(codim).quadrature(order)[1]) *
          integration_elements(codim)[e].  # NOQA


   .. method:: _quadrature_points(self, codim, order, npoints, quadrature_type)


   .. method:: bounding_box(self)

      Returns a `(2, dim)`-shaped array containing lower/upper bounding box coordinates.


   .. method:: _bounding_box(self)



.. class:: GridWithOrthogonalCenters


   Bases: :py:obj:`Grid`

   |Grid| with an additional `orthogonal_centers` method.

   .. method:: orthogonal_centers(self)
      :abstractmethod:

      `retval[e]` is a point inside the codim-0 entity with global index `e` such that the line
      segment from `retval[e]` to `retval[e2]` is always orthogonal to the codim-1 entity shared
      by the codim-0 entities with global index `e` and `e2`.

      (This is mainly useful for gradient approximation in finite volume schemes.)



.. class:: BoundaryInfo


   Bases: :py:obj:`pymor.core.cache.CacheableObject`

   Provides boundary types for the boundaries of a given |Grid|.

   For every boundary type and codimension a mask is provided, marking grid entities of the
   respective type and codimension by their global index.

   .. attribute:: boundary_types

      set of all boundary types the grid has.
      

   .. attribute:: cache_region
      :annotation: = memory

      

   .. method:: mask(self, boundary_type, codim)

      retval[i] is `True` if the codim-`codim` entity of global index `i` is associated to the
      boundary type `boundary_type`.


   .. method:: unique_boundary_type_mask(self, codim)

      retval[i] is `True` if the codim-`codim` entity of global index `i` is associated to one
      and only one boundary type.


   .. method:: no_boundary_type_mask(self, codim)

      retval[i] is `True` if the codim-`codim` entity of global index `i` is associated to no
      boundary type.


   .. method:: check_boundary_types(self, assert_unique_type=(1, ), assert_some_type=())


   .. method:: has_dirichlet(self)
      :property:


   .. method:: has_neumann(self)
      :property:


   .. method:: has_robin(self)
      :property:


   .. method:: dirichlet_mask(self, codim)


   .. method:: neumann_mask(self, codim)


   .. method:: robin_mask(self, codim)


   .. method:: _boundaries(self, boundary_type, codim)


   .. method:: boundaries(self, boundary_type, codim)


   .. method:: dirichlet_boundaries(self, codim)


   .. method:: neumann_boundaries(self, codim)


   .. method:: robin_boundaries(self, codim)



