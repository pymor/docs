:mod:`pymor.discretizers.builtin.list`
======================================

.. py:module:: pymor.discretizers.builtin.list


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.discretizers.builtin.list.ConvertToNumpyListVectorArrayRules



Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.discretizers.builtin.list.convert_to_numpy_list_vector_array



.. function:: convert_to_numpy_list_vector_array(obj)

   Use NumpyListVectorArrayMatrixOperator instead of NumpyMatrixOperator.

   This simple function recursively converts |NumpyMatrixOperators| to corresponding
   :class:`NumpyListVectorArrayMatrixOperators <pymor.operators.list.NumpyListVectorArrayMatrixOperator>`.

   .. admonition:: Parameters

       obj
           Either an |Operator|, e.g. |NumpyMatrixOperator| or a |LincombOperator| of
           |NumpyMatrixOperators|, or an entire |Model| that is to be converted.
           
   .. admonition:: Returns

       The converted |Operator| or |Model|.
           


.. class:: ConvertToNumpyListVectorArrayRules


   Bases: :py:obj:`pymor.algorithms.rules.RuleTable`

   Define algorithm by a table of match conditions and corresponding actions.

   |RuleTable| manages a table of |rules|, stored in the `rules`
   attributes, which can be :meth:`applied <apply>` to given
   objects.

   A new table is created by subclassing |RuleTable| and defining
   new methods which are decorated with :class:`match_class`,
   :class:`match_generic` or another :class:`rule` subclass.
   The order of the method definitions determines the order in
   which the defined |rules| are applied.

   .. admonition:: Parameters

       use_caching
           If `True`, cache results of :meth:`apply`.
           
   .. attribute:: rules

      `list` of all defined |rules|.
      

   .. method:: action_recurse(self, op)


   .. method:: action_NumpyMatrixOperator(self, op)


   .. method:: action_VectorArrayOperator(self, op)



