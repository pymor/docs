:mod:`pymor.discretizers.builtin.gui.qt`
========================================

.. py:module:: pymor.discretizers.builtin.gui.qt

.. autoapi-nested-parse::

   Visualization of grid data using Qt.

   This module provides a few methods and classes for visualizing data
   associated to grids. We use the `Qt <http://www.qt-project.org>`_ widget
   toolkit for the GUI.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.discretizers.builtin.gui.qt.PlotMainWindow



Functions
~~~~~~~~~

.. autoapisummary::
  :nosignatures:

   pymor.discretizers.builtin.gui.qt.background_visualization_method
   pymor.discretizers.builtin.gui.qt._launch_qt_app
   pymor.discretizers.builtin.gui.qt.visualize_patch
   pymor.discretizers.builtin.gui.qt.visualize_matplotlib_1d



Attributes
~~~~~~~~~~

.. autoapisummary::

   pymor.discretizers.builtin.gui.qt._qt_app
   pymor.discretizers.builtin.gui.qt._qt_windows


.. function:: background_visualization_method(method='ipython_if_possible')


.. function:: _launch_qt_app(main_window_factory, block)

   Wrapper to display plot in a separate process.


.. class:: PlotMainWindow(U, plot, length=1, title=None)


   Bases: :py:obj:`qtpy.QtWidgets.QWidget`

   Base class for plot main windows.

   .. method:: slider_changed(self, ind)


   .. method:: speed_changed(self, val)


   .. method:: update_solution(self)


   .. method:: toggle_play(self, checked)


   .. method:: rewind(self)


   .. method:: to_end(self)


   .. method:: step_forward(self)


   .. method:: step_backward(self)


   .. method:: closeEvent(self, event)



.. data:: _qt_app
   

   

.. data:: _qt_windows
   

   

.. function:: visualize_patch(grid, U, bounding_box=([0, 0], [1, 1]), codim=2, title=None, legend=None, separate_colorbars=False, rescale_colorbars=False, backend='gl', block=False, columns=2)

   Visualize scalar data associated to a two-dimensional |Grid| as a patch plot.

   The grid's |ReferenceElement| must be the triangle or square. The data can either
   be attached to the faces or vertices of the grid.

   .. admonition:: Parameters

       grid
           The underlying |Grid|.
       U
           |VectorArray| of the data to visualize. If `len(U) > 1`, the data is visualized
           as a time series of plots. Alternatively, a tuple of |VectorArrays| can be
           provided, in which case a subplot is created for each entry of the tuple. The
           lengths of all arrays have to agree.
       bounding_box
           A bounding box in which the grid is contained.
       codim
           The codimension of the entities the data in `U` is attached to (either 0 or 2).
       title
           Title of the plot.
       legend
           Description of the data that is plotted. Most useful if `U` is a tuple in which
           case `legend` has to be a tuple of strings of the same length.
       separate_colorbars
           If `True`, use separate colorbars for each subplot.
       rescale_colorbars
           If `True`, rescale colorbars to data in each frame.
       backend
           Plot backend to use ('gl' or 'matplotlib').
       block
           If `True`, block execution until the plot window is closed.
       columns
           The number of columns in the visualizer GUI in case multiple plots are displayed
           at the same time.
           


.. function:: visualize_matplotlib_1d(grid, U, codim=1, title=None, legend=None, separate_plots=False, block=False)

   Visualize scalar data associated to a one-dimensional |Grid| as a plot.

   The grid's |ReferenceElement| must be the line. The data can either
   be attached to the subintervals or vertices of the grid.

   .. admonition:: Parameters

       grid
           The underlying |Grid|.
       U
           |VectorArray| of the data to visualize. If `len(U) > 1`, the data is visualized
           as a time series of plots. Alternatively, a tuple of |VectorArrays| can be
           provided, in which case several plots are made into the same axes. The
           lengths of all arrays have to agree.
       codim
           The codimension of the entities the data in `U` is attached to (either 0 or 1).
       title
           Title of the plot.
       legend
           Description of the data that is plotted. Most useful if `U` is a tuple in which
           case `legend` has to be a tuple of strings of the same length.
       separate_plots
           If `True`, use subplots to visualize multiple |VectorArrays|.
       block
           If `True`, block execution until the plot window is closed.
           


