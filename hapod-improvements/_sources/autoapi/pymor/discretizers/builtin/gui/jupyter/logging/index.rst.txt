:mod:`pymor.discretizers.builtin.gui.jupyter.logging`
=====================================================

.. py:module:: pymor.discretizers.builtin.gui.jupyter.logging


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pymor.discretizers.builtin.gui.jupyter.logging.LogViewer
   pymor.discretizers.builtin.gui.jupyter.logging.LoggingRedirector




Attributes
~~~~~~~~~~

.. autoapisummary::

   pymor.discretizers.builtin.gui.jupyter.logging.redirect_logging


.. class:: LogViewer(out, accordion=None)


   Bases: :py:obj:`logging.Handler`

   Handler instances dispatch logging events to specific destinations.

   The base handler class. Acts as a placeholder which defines the Handler
   interface. Handlers can optionally use Formatter instances to format
   records as desired. By default, no formatter is specified; in this case,
   the 'raw' message as determined by record.message is logged.

   .. attribute:: out
      

      

   .. method:: emit(self, record)

      Do whatever it takes to actually log the specified logging record.

      This version is intended to be implemented by subclasses and so
      raises a NotImplementedError.


   .. method:: empty(self)
      :property:


   .. method:: close(self)

      Tidy up any resources used by the handler.

      This version removes the handler from an internal map of handlers,
      _handlers, which is used for handler lookup by name. Subclasses
      should ensure that this gets called from overridden close()
      methods.


   .. method:: __repr__(self)

      Return repr(self).



.. class:: LoggingRedirector


   .. method:: __enter__(self)


   .. method:: __exit__(self, exc_type, exc_val, exc_tb)


   .. method:: start(self)


   .. method:: stop(self)



.. data:: redirect_logging
   

   

